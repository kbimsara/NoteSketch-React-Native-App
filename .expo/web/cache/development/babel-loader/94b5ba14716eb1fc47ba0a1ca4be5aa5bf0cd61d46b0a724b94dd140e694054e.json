{"ast":null,"code":"import _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { Section as $6555104ff085bef4$re_export$Section, useCollection as $1BfjW$useCollection, getFirstItem as $1BfjW$getFirstItem, getLastItem as $1BfjW$getLastItem, CollectionBuilder as $1BfjW$CollectionBuilder } from \"@react-stately/collections\";\nimport $1BfjW$react, { useState as $1BfjW$useState, useMemo as $1BfjW$useMemo, useCallback as $1BfjW$useCallback } from \"react\";\nimport { useGridState as $1BfjW$useGridState, GridCollection as $1BfjW$GridCollection } from \"@react-stately/grid\";\nimport { tableNestedRows as $1BfjW$tableNestedRows } from \"@react-stately/flags\";\nimport { useControlledState as $1BfjW$useControlledState } from \"@react-stately/utils\";\nfunction $6818b1c4fc67028d$export$1994a077b98ee0d5(width) {\n  return width != null && (!isNaN(width) || String(width).match(/^(\\d+)(?=%$)/) !== null);\n}\nfunction $6818b1c4fc67028d$export$9078bad4c3934604(width) {\n  if (!width) return 1;\n  var match = width.match(/^(.+)(?=fr$)/);\n  if (!match) {\n    console.warn(`width: ${width} is not a supported format, width should be a number (ex. 150), percentage (ex. '50%') or fr unit (ex. '2fr')`, \"defaulting to '1fr'\");\n    return 1;\n  }\n  return parseFloat(match[0]);\n}\nfunction $6818b1c4fc67028d$export$7bbad27896f7ae9f(width, tableWidth) {\n  if (typeof width === \"string\") {\n    var match = width.match(/^(\\d+)(?=%$)/);\n    if (!match) throw new Error(\"Only percentages or numbers are supported for static column widths\");\n    return tableWidth * (parseFloat(match[0]) / 100);\n  }\n  return width;\n}\nfunction $6818b1c4fc67028d$export$59185c62a7544aa0(maxWidth, tableWidth) {\n  return maxWidth != null ? $6818b1c4fc67028d$export$7bbad27896f7ae9f(maxWidth, tableWidth) : Number.MAX_SAFE_INTEGER;\n}\nfunction $6818b1c4fc67028d$export$f556054ce4358701(minWidth, tableWidth) {\n  return minWidth != null ? $6818b1c4fc67028d$export$7bbad27896f7ae9f(minWidth, tableWidth) : 0;\n}\nfunction $6818b1c4fc67028d$export$55d50dc687385491(availableWidth, columns, changedColumns, getDefaultWidth, getDefaultMinWidth) {\n  var hasNonFrozenItems = false;\n  var flexItems = columns.map(function (column, index) {\n    var _column_width, _ref, _ref1;\n    var width = changedColumns.get(column.key) != null ? changedColumns.get(column.key) : (_ref1 = (_ref = (_column_width = column.width) !== null && _column_width !== void 0 ? _column_width : column.defaultWidth) !== null && _ref !== void 0 ? _ref : getDefaultWidth === null || getDefaultWidth === void 0 ? void 0 : getDefaultWidth(index)) !== null && _ref1 !== void 0 ? _ref1 : \"1fr\";\n    var frozen = false;\n    var baseSize = 0;\n    var flex = 0;\n    var targetMainSize = null;\n    if ($6818b1c4fc67028d$export$1994a077b98ee0d5(width)) {\n      baseSize = $6818b1c4fc67028d$export$7bbad27896f7ae9f(width, availableWidth);\n      frozen = true;\n    } else {\n      flex = $6818b1c4fc67028d$export$9078bad4c3934604(width);\n      if (flex <= 0) frozen = true;\n    }\n    var _column_minWidth, _ref2;\n    var min = $6818b1c4fc67028d$export$f556054ce4358701((_ref2 = (_column_minWidth = column.minWidth) !== null && _column_minWidth !== void 0 ? _column_minWidth : getDefaultMinWidth === null || getDefaultMinWidth === void 0 ? void 0 : getDefaultMinWidth(index)) !== null && _ref2 !== void 0 ? _ref2 : 0, availableWidth);\n    var max = $6818b1c4fc67028d$export$59185c62a7544aa0(column.maxWidth, availableWidth);\n    var hypotheticalMainSize = Math.max(min, Math.min(baseSize, max));\n    if (frozen) targetMainSize = hypotheticalMainSize;else if (baseSize > hypotheticalMainSize) {\n      frozen = true;\n      targetMainSize = hypotheticalMainSize;\n    }\n    if (!frozen) hasNonFrozenItems = true;\n    return {\n      frozen: frozen,\n      baseSize: baseSize,\n      hypotheticalMainSize: hypotheticalMainSize,\n      min: min,\n      max: max,\n      flex: flex,\n      targetMainSize: targetMainSize,\n      violation: 0\n    };\n  });\n  var _loop = function _loop() {\n    var usedWidth = 0;\n    var flexFactors = 0;\n    flexItems.forEach(function (item) {\n      if (item.frozen) usedWidth += item.targetMainSize;else {\n        usedWidth += item.baseSize;\n        flexFactors += item.flex;\n      }\n    });\n    var remainingFreeSpace = availableWidth - usedWidth;\n    if (remainingFreeSpace > 0) flexItems.forEach(function (item) {\n      if (!item.frozen) {\n        var ratio = item.flex / flexFactors;\n        item.targetMainSize = item.baseSize + ratio * remainingFreeSpace;\n      }\n    });\n    var totalViolation = 0;\n    flexItems.forEach(function (item) {\n      item.violation = 0;\n      if (!item.frozen) {\n        var min = item.min,\n          max = item.max,\n          targetMainSize = item.targetMainSize;\n        item.targetMainSize = Math.max(min, Math.min(targetMainSize, max));\n        item.violation = item.targetMainSize - targetMainSize;\n        totalViolation += item.violation;\n      }\n    });\n    hasNonFrozenItems = false;\n    flexItems.forEach(function (item) {\n      if (totalViolation === 0 || Math.sign(totalViolation) === Math.sign(item.violation)) item.frozen = true;else if (!item.frozen) hasNonFrozenItems = true;\n    });\n  };\n  while (hasNonFrozenItems) {\n    _loop();\n  }\n  return $6818b1c4fc67028d$var$cascadeRounding(flexItems);\n}\nfunction $6818b1c4fc67028d$var$cascadeRounding(flexItems) {\n  var fpTotal = 0;\n  var intTotal = 0;\n  var roundedArray = [];\n  flexItems.forEach(function (item) {\n    var float = item.targetMainSize;\n    var integer = Math.round(float + fpTotal) - intTotal;\n    fpTotal += float;\n    intTotal += integer;\n    roundedArray.push(integer);\n  });\n  return roundedArray;\n}\nvar $a9e7ae544a4e41dd$export$7ff77a162970b30e = function () {\n  function $a9e7ae544a4e41dd$export$7ff77a162970b30e(options) {\n    _classCallCheck(this, $a9e7ae544a4e41dd$export$7ff77a162970b30e);\n    this.columnWidths = new Map();\n    this.columnMinWidths = new Map();\n    this.columnMaxWidths = new Map();\n    var _options_getDefaultWidth;\n    this.getDefaultWidth = (_options_getDefaultWidth = options === null || options === void 0 ? void 0 : options.getDefaultWidth) !== null && _options_getDefaultWidth !== void 0 ? _options_getDefaultWidth : function () {\n      return \"1fr\";\n    };\n    var _options_getDefaultMinWidth;\n    this.getDefaultMinWidth = (_options_getDefaultMinWidth = options === null || options === void 0 ? void 0 : options.getDefaultMinWidth) !== null && _options_getDefaultMinWidth !== void 0 ? _options_getDefaultMinWidth : function () {\n      return 75;\n    };\n  }\n  return _createClass($a9e7ae544a4e41dd$export$7ff77a162970b30e, [{\n    key: \"splitColumnsIntoControlledAndUncontrolled\",\n    value: function splitColumnsIntoControlledAndUncontrolled(columns) {\n      return columns.reduce(function (acc, col) {\n        if (col.props.width != null) acc[0].set(col.key, col);else acc[1].set(col.key, col);\n        return acc;\n      }, [new Map(), new Map()]);\n    }\n  }, {\n    key: \"recombineColumns\",\n    value: function recombineColumns(columns, uncontrolledWidths, uncontrolledColumns, controlledColumns) {\n      return new Map(columns.map(function (col) {\n        if (uncontrolledColumns.has(col.key)) return [col.key, uncontrolledWidths.get(col.key)];else return [col.key, controlledColumns.get(col.key).props.width];\n      }));\n    }\n  }, {\n    key: \"getInitialUncontrolledWidths\",\n    value: function getInitialUncontrolledWidths(uncontrolledColumns) {\n      var _this2 = this;\n      return new Map(Array.from(uncontrolledColumns).map(function (_ref3) {\n        var _ref4 = _slicedToArray(_ref3, 2),\n          key = _ref4[0],\n          col = _ref4[1];\n        var _this_getDefaultWidth, _this;\n        var _col_props_defaultWidth, _ref;\n        return [key, (_ref = (_col_props_defaultWidth = col.props.defaultWidth) !== null && _col_props_defaultWidth !== void 0 ? _col_props_defaultWidth : (_this_getDefaultWidth = (_this = _this2).getDefaultWidth) === null || _this_getDefaultWidth === void 0 ? void 0 : _this_getDefaultWidth.call(_this, col)) !== null && _ref !== void 0 ? _ref : \"1fr\"];\n      }));\n    }\n  }, {\n    key: \"getColumnWidth\",\n    value: function getColumnWidth(key) {\n      var _this_columnWidths_get;\n      return (_this_columnWidths_get = this.columnWidths.get(key)) !== null && _this_columnWidths_get !== void 0 ? _this_columnWidths_get : 0;\n    }\n  }, {\n    key: \"getColumnMinWidth\",\n    value: function getColumnMinWidth(key) {\n      var _this_columnMinWidths_get;\n      return (_this_columnMinWidths_get = this.columnMinWidths.get(key)) !== null && _this_columnMinWidths_get !== void 0 ? _this_columnMinWidths_get : 0;\n    }\n  }, {\n    key: \"getColumnMaxWidth\",\n    value: function getColumnMaxWidth(key) {\n      var _this_columnMaxWidths_get;\n      return (_this_columnMaxWidths_get = this.columnMaxWidths.get(key)) !== null && _this_columnMaxWidths_get !== void 0 ? _this_columnMaxWidths_get : 0;\n    }\n  }, {\n    key: \"resizeColumnWidth\",\n    value: function resizeColumnWidth(tableWidth, collection, controlledWidths, uncontrolledWidths) {\n      var _this3 = this;\n      var col = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n      var width = arguments.length > 5 ? arguments[5] : undefined;\n      var prevColumnWidths = this.columnWidths;\n      var resizeIndex = Infinity;\n      var resizingChanged = new Map([].concat(_toConsumableArray(controlledWidths), _toConsumableArray(uncontrolledWidths)));\n      var percentKeys = new Map();\n      var frKeysToTheRight = new Map();\n      var minWidths = new Map();\n      collection.columns.forEach(function (column, i) {\n        var _column_props_width_endsWith, _column_props_width;\n        var frKey;\n        var frValue;\n        minWidths.set(column.key, _this3.getDefaultMinWidth(collection.columns[i]));\n        if (col !== column.key && !column.props.width && !(0, $6818b1c4fc67028d$export$1994a077b98ee0d5)(uncontrolledWidths.get(column.key))) {\n          frKey = column.key;\n          frValue = (0, $6818b1c4fc67028d$export$9078bad4c3934604)(uncontrolledWidths.get(column.key));\n        } else if (col !== column.key && !(0, $6818b1c4fc67028d$export$1994a077b98ee0d5)(column.props.width) && !uncontrolledWidths.get(column.key)) {\n          frKey = column.key;\n          frValue = (0, $6818b1c4fc67028d$export$9078bad4c3934604)(column.props.width);\n        } else if (col !== column.key && ((_column_props_width = column.props.width) === null || _column_props_width === void 0 ? void 0 : (_column_props_width_endsWith = _column_props_width.endsWith) === null || _column_props_width_endsWith === void 0 ? void 0 : _column_props_width_endsWith.call(_column_props_width, \"%\"))) percentKeys.set(column.key, column.props.width);\n        if (resizeIndex < i) {\n          if (frKey) frKeysToTheRight.set(frKey, frValue);\n          return;\n        }\n        if (column.key === col) {\n          resizeIndex = i;\n          resizingChanged.set(column.key, Math.floor(width));\n          return;\n        }\n        resizingChanged.set(column.key, prevColumnWidths.get(column.key));\n      });\n      var columnWidths = (0, $6818b1c4fc67028d$export$55d50dc687385491)(tableWidth, collection.columns.map(function (col) {\n        return _objectSpread(_objectSpread({}, col.props), {}, {\n          key: col.key\n        });\n      }), resizingChanged, function (i) {\n        return _this3.getDefaultWidth(collection.columns[i]);\n      }, function (i) {\n        return _this3.getDefaultMinWidth(collection.columns[i]);\n      });\n      var newWidths = new Map();\n      columnWidths.forEach(function (width, index) {\n        var key = collection.columns[index].key;\n        newWidths.set(key, width);\n      });\n      Array.from(frKeysToTheRight).forEach(function (_ref5) {\n        var _ref6 = _slicedToArray(_ref5, 1),\n          key = _ref6[0];\n        newWidths.set(key, `${frKeysToTheRight.get(key)}fr`);\n      });\n      Array.from(percentKeys).forEach(function (_ref7) {\n        var _ref8 = _slicedToArray(_ref7, 2),\n          key = _ref8[0],\n          width = _ref8[1];\n        if (key === col) return;\n        newWidths.set(key, width);\n      });\n      return newWidths;\n    }\n  }, {\n    key: \"buildColumnWidths\",\n    value: function buildColumnWidths(tableWidth, collection, widths) {\n      var _this4 = this;\n      this.columnWidths = new Map();\n      this.columnMinWidths = new Map();\n      this.columnMaxWidths = new Map();\n      var columnWidths = (0, $6818b1c4fc67028d$export$55d50dc687385491)(tableWidth, collection.columns.map(function (col) {\n        return _objectSpread(_objectSpread({}, col.props), {}, {\n          key: col.key\n        });\n      }), widths, function (i) {\n        return _this4.getDefaultWidth(collection.columns[i]);\n      }, function (i) {\n        return _this4.getDefaultMinWidth(collection.columns[i]);\n      });\n      columnWidths.forEach(function (width, index) {\n        var key = collection.columns[index].key;\n        var column = collection.columns[index];\n        _this4.columnWidths.set(key, width);\n        var _column_props_minWidth;\n        _this4.columnMinWidths.set(key, (0, $6818b1c4fc67028d$export$f556054ce4358701)((_column_props_minWidth = column.props.minWidth) !== null && _column_props_minWidth !== void 0 ? _column_props_minWidth : _this4.getDefaultMinWidth(column), tableWidth));\n        _this4.columnMaxWidths.set(key, (0, $6818b1c4fc67028d$export$59185c62a7544aa0)(column.props.maxWidth, tableWidth));\n      });\n      return this.columnWidths;\n    }\n  }]);\n}();\nfunction $292bc4e09cd0eb62$export$cb895dcf85db1319(props, state) {\n  var getDefaultWidth = props.getDefaultWidth,\n    getDefaultMinWidth = props.getDefaultMinWidth,\n    _props$tableWidth = props.tableWidth,\n    tableWidth = _props$tableWidth === void 0 ? 0 : _props$tableWidth;\n  var _ref9 = (0, $1BfjW$useState)(null),\n    _ref10 = _slicedToArray(_ref9, 2),\n    resizingColumn = _ref10[0],\n    setResizingColumn = _ref10[1];\n  var columnLayout = (0, $1BfjW$useMemo)(function () {\n    return new (0, $a9e7ae544a4e41dd$export$7ff77a162970b30e)({\n      getDefaultWidth: getDefaultWidth,\n      getDefaultMinWidth: getDefaultMinWidth\n    });\n  }, [getDefaultWidth, getDefaultMinWidth]);\n  var _ref11 = (0, $1BfjW$useMemo)(function () {\n      return columnLayout.splitColumnsIntoControlledAndUncontrolled(state.collection.columns);\n    }, [state.collection.columns, columnLayout]),\n    _ref12 = _slicedToArray(_ref11, 2),\n    controlledColumns = _ref12[0],\n    uncontrolledColumns = _ref12[1];\n  var _ref13 = (0, $1BfjW$useState)(function () {\n      return columnLayout.getInitialUncontrolledWidths(uncontrolledColumns);\n    }),\n    _ref14 = _slicedToArray(_ref13, 2),\n    uncontrolledWidths = _ref14[0],\n    setUncontrolledWidths = _ref14[1];\n  var _ref15 = (0, $1BfjW$useState)(state.collection.columns),\n    _ref16 = _slicedToArray(_ref15, 2),\n    lastColumns = _ref16[0],\n    setLastColumns = _ref16[1];\n  if (state.collection.columns !== lastColumns) {\n    if (state.collection.columns.length !== lastColumns.length || state.collection.columns.some(function (c, i) {\n      return c.key !== lastColumns[i].key;\n    })) {\n      var newUncontrolledWidths = columnLayout.getInitialUncontrolledWidths(uncontrolledColumns);\n      setUncontrolledWidths(newUncontrolledWidths);\n    }\n    setLastColumns(state.collection.columns);\n  }\n  var colWidths = (0, $1BfjW$useMemo)(function () {\n    return columnLayout.recombineColumns(state.collection.columns, uncontrolledWidths, uncontrolledColumns, controlledColumns);\n  }, [state.collection.columns, uncontrolledWidths, uncontrolledColumns, controlledColumns, columnLayout]);\n  var startResize = (0, $1BfjW$useCallback)(function (key) {\n    setResizingColumn(key);\n  }, [setResizingColumn]);\n  var updateResizedColumns = (0, $1BfjW$useCallback)(function (key, width) {\n    var newControlled = new Map(Array.from(controlledColumns).map(function (_ref17) {\n      var _ref18 = _slicedToArray(_ref17, 2),\n        key = _ref18[0],\n        entry = _ref18[1];\n      return [key, entry.props.width];\n    }));\n    var newSizes = columnLayout.resizeColumnWidth(tableWidth, state.collection, newControlled, uncontrolledWidths, key, width);\n    var map = new Map(Array.from(uncontrolledColumns).map(function (_ref19) {\n      var _ref20 = _slicedToArray(_ref19, 1),\n        key = _ref20[0];\n      return [key, newSizes.get(key)];\n    }));\n    map.set(key, width);\n    setUncontrolledWidths(map);\n    return newSizes;\n  }, [controlledColumns, uncontrolledColumns, setUncontrolledWidths, tableWidth, columnLayout, state.collection, uncontrolledWidths]);\n  var endResize = (0, $1BfjW$useCallback)(function () {\n    setResizingColumn(null);\n  }, [setResizingColumn]);\n  (0, $1BfjW$useMemo)(function () {\n    return columnLayout.buildColumnWidths(tableWidth, state.collection, colWidths);\n  }, [tableWidth, state.collection, colWidths, columnLayout]);\n  return (0, $1BfjW$useMemo)(function () {\n    return {\n      resizingColumn: resizingColumn,\n      updateResizedColumns: updateResizedColumns,\n      startResize: startResize,\n      endResize: endResize,\n      getColumnWidth: function getColumnWidth(key) {\n        return columnLayout.getColumnWidth(key);\n      },\n      getColumnMinWidth: function getColumnMinWidth(key) {\n        return columnLayout.getColumnMinWidth(key);\n      },\n      getColumnMaxWidth: function getColumnMaxWidth(key) {\n        return columnLayout.getColumnMaxWidth(key);\n      },\n      tableState: state\n    };\n  }, [columnLayout, resizingColumn, updateResizedColumns, startResize, endResize, state]);\n}\nvar $788781baa30117fa$var$ROW_HEADER_COLUMN_KEY = \"row-header-column-\" + Math.random().toString(36).slice(2);\nvar $788781baa30117fa$var$ROW_HEADER_COLUMN_KEY_DRAG = \"row-header-column-\" + Math.random().toString(36).slice(2);\nwhile ($788781baa30117fa$var$ROW_HEADER_COLUMN_KEY === $788781baa30117fa$var$ROW_HEADER_COLUMN_KEY_DRAG) $788781baa30117fa$var$ROW_HEADER_COLUMN_KEY_DRAG = \"row-header-column-\" + Math.random().toString(36).slice(2);\nfunction $788781baa30117fa$export$7c127db850d4e81e(keyMap, columnNodes) {\n  if (columnNodes.length === 0) return [];\n  var columns = [];\n  var seen = new Map();\n  for (var column of columnNodes) {\n    var parentKey = column.parentKey;\n    var col = [column];\n    while (parentKey) {\n      var parent = keyMap.get(parentKey);\n      if (!parent) break;\n      if (seen.has(parent)) {\n        parent.colspan++;\n        var _seen$get = seen.get(parent),\n          _column = _seen$get.column,\n          index = _seen$get.index;\n        if (index > col.length) break;\n        for (var _i = index; _i < col.length; _i++) _column.splice(_i, 0, null);\n        for (var _i2 = col.length; _i2 < _column.length; _i2++) if (_column[_i2] && seen.has(_column[_i2])) seen.get(_column[_i2]).index = _i2;\n      } else {\n        parent.colspan = 1;\n        col.push(parent);\n        seen.set(parent, {\n          column: col,\n          index: col.length - 1\n        });\n      }\n      parentKey = parent.parentKey;\n    }\n    columns.push(col);\n    column.index = columns.length - 1;\n  }\n  var maxLength = Math.max.apply(Math, _toConsumableArray(columns.map(function (c) {\n    return c.length;\n  })));\n  var headerRows = Array(maxLength).fill(0).map(function () {\n    return [];\n  });\n  var colIndex = 0;\n  for (var _column2 of columns) {\n    var _i3 = maxLength - 1;\n    for (var item of _column2) {\n      if (item) {\n        var row = headerRows[_i3];\n        var rowLength = row.reduce(function (p, c) {\n          return p + c.colspan;\n        }, 0);\n        if (rowLength < colIndex) {\n          var placeholder = {\n            type: \"placeholder\",\n            key: \"placeholder-\" + item.key,\n            colspan: colIndex - rowLength,\n            index: rowLength,\n            value: null,\n            rendered: null,\n            level: _i3,\n            hasChildNodes: false,\n            childNodes: [],\n            textValue: null\n          };\n          if (row.length > 0) {\n            row[row.length - 1].nextKey = placeholder.key;\n            placeholder.prevKey = row[row.length - 1].key;\n          }\n          row.push(placeholder);\n        }\n        if (row.length > 0) {\n          row[row.length - 1].nextKey = item.key;\n          item.prevKey = row[row.length - 1].key;\n        }\n        item.level = _i3;\n        item.colIndex = colIndex;\n        row.push(item);\n      }\n      _i3--;\n    }\n    colIndex++;\n  }\n  var i = 0;\n  for (var _row of headerRows) {\n    var _rowLength = _row.reduce(function (p, c) {\n      return p + c.colspan;\n    }, 0);\n    if (_rowLength < columnNodes.length) {\n      var _placeholder = {\n        type: \"placeholder\",\n        key: \"placeholder-\" + _row[_row.length - 1].key,\n        colspan: columnNodes.length - _rowLength,\n        index: _rowLength,\n        value: null,\n        rendered: null,\n        level: i,\n        hasChildNodes: false,\n        childNodes: [],\n        textValue: null,\n        prevKey: _row[_row.length - 1].key\n      };\n      _row.push(_placeholder);\n    }\n    i++;\n  }\n  return headerRows.map(function (childNodes, index) {\n    var row = {\n      type: \"headerrow\",\n      key: \"headerrow-\" + index,\n      index: index,\n      value: null,\n      rendered: null,\n      level: 0,\n      hasChildNodes: true,\n      childNodes: childNodes,\n      textValue: null\n    };\n    return row;\n  });\n}\nvar $788781baa30117fa$export$596e1b2e2cf93690 = function (_ref21) {\n  function $788781baa30117fa$export$596e1b2e2cf93690(nodes, prev, opts) {\n    var _this5;\n    _classCallCheck(this, $788781baa30117fa$export$596e1b2e2cf93690);\n    var rowHeaderColumnKeys = new Set();\n    var body;\n    var columns = [];\n    if (opts === null || opts === void 0 ? void 0 : opts.showSelectionCheckboxes) {\n      var rowHeaderColumn = {\n        type: \"column\",\n        key: $788781baa30117fa$var$ROW_HEADER_COLUMN_KEY,\n        value: null,\n        textValue: \"\",\n        level: 0,\n        index: (opts === null || opts === void 0 ? void 0 : opts.showDragButtons) ? 1 : 0,\n        hasChildNodes: false,\n        rendered: null,\n        childNodes: [],\n        props: {\n          isSelectionCell: true\n        }\n      };\n      columns.unshift(rowHeaderColumn);\n    }\n    if (opts === null || opts === void 0 ? void 0 : opts.showDragButtons) {\n      var _rowHeaderColumn = {\n        type: \"column\",\n        key: $788781baa30117fa$var$ROW_HEADER_COLUMN_KEY_DRAG,\n        value: null,\n        textValue: \"\",\n        level: 0,\n        index: 0,\n        hasChildNodes: false,\n        rendered: null,\n        childNodes: [],\n        props: {\n          isDragButtonCell: true\n        }\n      };\n      columns.unshift(_rowHeaderColumn);\n    }\n    var rows = [];\n    var columnKeyMap = new Map();\n    var visit = function visit(node) {\n      switch (node.type) {\n        case \"body\":\n          body = node;\n          break;\n        case \"column\":\n          columnKeyMap.set(node.key, node);\n          if (!node.hasChildNodes) {\n            columns.push(node);\n            if (node.props.isRowHeader) rowHeaderColumnKeys.add(node.key);\n          }\n          break;\n        case \"item\":\n          rows.push(node);\n          return;\n      }\n      for (var child of node.childNodes) visit(child);\n    };\n    for (var node of nodes) visit(node);\n    var headerRows = $788781baa30117fa$export$7c127db850d4e81e(columnKeyMap, columns);\n    headerRows.forEach(function (row, i) {\n      return rows.splice(i, 0, row);\n    });\n    _this5 = _callSuper(this, $788781baa30117fa$export$596e1b2e2cf93690, [{\n      columnCount: columns.length,\n      items: rows,\n      visitNode: function visitNode(node) {\n        node.column = columns[node.index];\n        return node;\n      }\n    }]);\n    _this5._size = 0;\n    _this5.columns = columns;\n    _this5.rowHeaderColumnKeys = rowHeaderColumnKeys;\n    _this5.body = body;\n    _this5.headerRows = headerRows;\n    _this5._size = _toConsumableArray(body.childNodes).length;\n    if (_this5.rowHeaderColumnKeys.size === 0) _this5.rowHeaderColumnKeys.add(_this5.columns.find(function (column) {\n      var _column_props, _column_props1;\n      return !((_column_props = column.props) === null || _column_props === void 0 ? void 0 : _column_props.isDragButtonCell) && !((_column_props1 = column.props) === null || _column_props1 === void 0 ? void 0 : _column_props1.isSelectionCell);\n    }).key);\n    return _this5;\n  }\n  _inherits($788781baa30117fa$export$596e1b2e2cf93690, _ref21);\n  return _createClass($788781baa30117fa$export$596e1b2e2cf93690, [{\n    key: Symbol.iterator,\n    value: function* value() {\n      yield* this.body.childNodes;\n    }\n  }, {\n    key: \"size\",\n    get: function get() {\n      return this._size;\n    }\n  }, {\n    key: \"getKeys\",\n    value: function getKeys() {\n      return this.keyMap.keys();\n    }\n  }, {\n    key: \"getKeyBefore\",\n    value: function getKeyBefore(key) {\n      var node = this.keyMap.get(key);\n      return node ? node.prevKey : null;\n    }\n  }, {\n    key: \"getKeyAfter\",\n    value: function getKeyAfter(key) {\n      var node = this.keyMap.get(key);\n      return node ? node.nextKey : null;\n    }\n  }, {\n    key: \"getFirstKey\",\n    value: function getFirstKey() {\n      var _getFirstItem;\n      return (_getFirstItem = (0, $1BfjW$getFirstItem)(this.body.childNodes)) === null || _getFirstItem === void 0 ? void 0 : _getFirstItem.key;\n    }\n  }, {\n    key: \"getLastKey\",\n    value: function getLastKey() {\n      var _getLastItem;\n      return (_getLastItem = (0, $1BfjW$getLastItem)(this.body.childNodes)) === null || _getLastItem === void 0 ? void 0 : _getLastItem.key;\n    }\n  }, {\n    key: \"getItem\",\n    value: function getItem(key) {\n      return this.keyMap.get(key);\n    }\n  }, {\n    key: \"at\",\n    value: function at(idx) {\n      var keys = _toConsumableArray(this.getKeys());\n      return this.getItem(keys[idx]);\n    }\n  }, {\n    key: \"getTextValue\",\n    value: function getTextValue(key) {\n      var row = this.getItem(key);\n      if (!row) return \"\";\n      if (row.textValue) return row.textValue;\n      var rowHeaderColumnKeys = this.rowHeaderColumnKeys;\n      if (rowHeaderColumnKeys) {\n        var text = [];\n        for (var cell of row.childNodes) {\n          var column = this.columns[cell.index];\n          if (rowHeaderColumnKeys.has(column.key) && cell.textValue) text.push(cell.textValue);\n          if (text.length === rowHeaderColumnKeys.size) break;\n        }\n        return text.join(\" \");\n      }\n      return \"\";\n    }\n  }]);\n}((0, $1BfjW$GridCollection));\nvar $4a0dd036d492cee4$var$OPPOSITE_SORT_DIRECTION = {\n  ascending: \"descending\",\n  descending: \"ascending\"\n};\nfunction $4a0dd036d492cee4$export$907bcc6c48325fd6(props) {\n  var _ref22 = (0, $1BfjW$useState)(false),\n    _ref23 = _slicedToArray(_ref22, 2),\n    isKeyboardNavigationDisabled = _ref23[0],\n    setKeyboardNavigationDisabled = _ref23[1];\n  var _props$selectionMode = props.selectionMode,\n    selectionMode = _props$selectionMode === void 0 ? \"none\" : _props$selectionMode,\n    showSelectionCheckboxes = props.showSelectionCheckboxes,\n    showDragButtons = props.showDragButtons;\n  var context = (0, $1BfjW$useMemo)(function () {\n    return {\n      showSelectionCheckboxes: showSelectionCheckboxes && selectionMode !== \"none\",\n      showDragButtons: showDragButtons,\n      selectionMode: selectionMode,\n      columns: []\n    };\n  }, [props.children, showSelectionCheckboxes, selectionMode, showDragButtons]);\n  var collection = (0, $1BfjW$useCollection)(props, (0, $1BfjW$useCallback)(function (nodes) {\n    return new (0, $788781baa30117fa$export$596e1b2e2cf93690)(nodes, null, context);\n  }, [context]), context);\n  var _ref24 = (0, $1BfjW$useGridState)(_objectSpread(_objectSpread({}, props), {}, {\n      collection: collection,\n      disabledBehavior: props.disabledBehavior || \"selection\"\n    })),\n    disabledKeys = _ref24.disabledKeys,\n    selectionManager = _ref24.selectionManager;\n  return {\n    collection: collection,\n    disabledKeys: disabledKeys,\n    selectionManager: selectionManager,\n    showSelectionCheckboxes: props.showSelectionCheckboxes || false,\n    sortDescriptor: props.sortDescriptor,\n    isKeyboardNavigationDisabled: collection.size === 0 || isKeyboardNavigationDisabled,\n    setKeyboardNavigationDisabled: setKeyboardNavigationDisabled,\n    sort: function sort(columnKey, direction) {\n      var _props_sortDescriptor;\n      props.onSortChange({\n        column: columnKey,\n        direction: direction !== null && direction !== void 0 ? direction : ((_props_sortDescriptor = props.sortDescriptor) === null || _props_sortDescriptor === void 0 ? void 0 : _props_sortDescriptor.column) === columnKey ? $4a0dd036d492cee4$var$OPPOSITE_SORT_DIRECTION[props.sortDescriptor.direction] : \"ascending\"\n      });\n    }\n  };\n}\nfunction $312ae3b56a94a86e$var$TableHeader(props) {\n  return null;\n}\n$312ae3b56a94a86e$var$TableHeader.getCollectionNode = function* getCollectionNode(props, context) {\n  var children = props.children,\n    columns = props.columns;\n  context.columns = [];\n  if (typeof children === \"function\") {\n    if (!columns) throw new Error(\"props.children was a function but props.columns is missing\");\n    for (var column of columns) yield {\n      type: \"column\",\n      value: column,\n      renderer: children\n    };\n  } else {\n    var _columns = [];\n    (0, $1BfjW$react).Children.forEach(children, function (column) {\n      _columns.push({\n        type: \"column\",\n        element: column\n      });\n    });\n    yield* _columns;\n  }\n};\nvar $312ae3b56a94a86e$export$f850895b287ef28e = $312ae3b56a94a86e$var$TableHeader;\nfunction $4ae5314bf50db1a3$var$TableBody(props) {\n  return null;\n}\n$4ae5314bf50db1a3$var$TableBody.getCollectionNode = function* getCollectionNode(props) {\n  var children = props.children,\n    items = props.items;\n  yield {\n    type: \"body\",\n    hasChildNodes: true,\n    props: props,\n    childNodes: function* childNodes() {\n      if (typeof children === \"function\") {\n        if (!items) throw new Error(\"props.children was a function but props.items is missing\");\n        for (var item of items) yield {\n          type: \"item\",\n          value: item,\n          renderer: children\n        };\n      } else {\n        var _items = [];\n        (0, $1BfjW$react).Children.forEach(children, function (item) {\n          _items.push({\n            type: \"item\",\n            element: item\n          });\n        });\n        yield* _items;\n      }\n    }\n  };\n};\nvar $4ae5314bf50db1a3$export$76ccd210b9029917 = $4ae5314bf50db1a3$var$TableBody;\nfunction $1cd244557c2f97d5$var$Column(props) {\n  return null;\n}\n$1cd244557c2f97d5$var$Column.getCollectionNode = function* getCollectionNode(props, context) {\n  var title = props.title,\n    children = props.children,\n    childColumns = props.childColumns;\n  var rendered = title || children;\n  var textValue = props.textValue || (typeof rendered === \"string\" ? rendered : \"\") || props[\"aria-label\"];\n  var fullNodes = yield {\n    type: \"column\",\n    hasChildNodes: !!childColumns || title && (0, $1BfjW$react).Children.count(children) > 0,\n    rendered: rendered,\n    textValue: textValue,\n    props: props,\n    childNodes: function* childNodes() {\n      if (childColumns) for (var child of childColumns) yield {\n        type: \"column\",\n        value: child\n      };else if (title) {\n        var _childColumns = [];\n        (0, $1BfjW$react).Children.forEach(children, function (child) {\n          _childColumns.push({\n            type: \"column\",\n            element: child\n          });\n        });\n        yield* _childColumns;\n      }\n    },\n    shouldInvalidate: function shouldInvalidate(newContext) {\n      updateContext(newContext);\n      return false;\n    }\n  };\n  var updateContext = function updateContext(context) {\n    for (var node of fullNodes) if (!node.hasChildNodes) context.columns.push(node);\n  };\n  updateContext(context);\n};\nvar $1cd244557c2f97d5$export$816b5d811295e6bc = $1cd244557c2f97d5$var$Column;\nfunction $70d70eb16ea48428$var$Row(props) {\n  return null;\n}\n$70d70eb16ea48428$var$Row.getCollectionNode = function* getCollectionNode(props, context) {\n  var children = props.children,\n    textValue = props.textValue,\n    UNSTABLE_childItems = props.UNSTABLE_childItems;\n  yield {\n    type: \"item\",\n    props: props,\n    textValue: textValue,\n    \"aria-label\": props[\"aria-label\"],\n    hasChildNodes: true,\n    childNodes: function* childNodes() {\n      if (context.showDragButtons) yield {\n        type: \"cell\",\n        key: \"header-drag\",\n        props: {\n          isDragButtonCell: true\n        }\n      };\n      if (context.showSelectionCheckboxes && context.selectionMode !== \"none\") yield {\n        type: \"cell\",\n        key: \"header\",\n        props: {\n          isSelectionCell: true\n        }\n      };\n      if (typeof children === \"function\") {\n        for (var column of context.columns) yield {\n          type: \"cell\",\n          element: children(column.key),\n          key: column.key\n        };\n        if (UNSTABLE_childItems) for (var child of UNSTABLE_childItems) yield {\n          type: \"item\",\n          value: child\n        };\n      } else {\n        var cells = [];\n        var childRows = [];\n        (0, $1BfjW$react).Children.forEach(children, function (node) {\n          if (node.type === $70d70eb16ea48428$var$Row) {\n            if (cells.length < context.columns.length) throw new Error(\"All of a Row's child Cells must be positioned before any child Rows.\");\n            childRows.push({\n              type: \"item\",\n              element: node\n            });\n          } else cells.push({\n            type: \"cell\",\n            element: node\n          });\n        });\n        if (cells.length !== context.columns.length) throw new Error(`Cell count must match column count. Found ${cells.length} cells and ${context.columns.length} columns.`);\n        yield* cells;\n        yield* childRows;\n      }\n    },\n    shouldInvalidate: function shouldInvalidate(newContext) {\n      return newContext.columns.length !== context.columns.length || newContext.columns.some(function (c, i) {\n        return c.key !== context.columns[i].key;\n      }) || newContext.showSelectionCheckboxes !== context.showSelectionCheckboxes || newContext.showDragButtons !== context.showDragButtons || newContext.selectionMode !== context.selectionMode;\n    }\n  };\n};\nvar $70d70eb16ea48428$export$b59bdbef9ce70de2 = $70d70eb16ea48428$var$Row;\nfunction $941d1d9a6a28982a$var$Cell(props) {\n  return null;\n}\n$941d1d9a6a28982a$var$Cell.getCollectionNode = function* getCollectionNode(props) {\n  var children = props.children;\n  var textValue = props.textValue || (typeof children === \"string\" ? children : \"\") || props[\"aria-label\"] || \"\";\n  yield {\n    type: \"cell\",\n    props: props,\n    rendered: children,\n    textValue: textValue,\n    \"aria-label\": props[\"aria-label\"],\n    hasChildNodes: false\n  };\n};\nvar $941d1d9a6a28982a$export$f6f0c3fe4ec306ea = $941d1d9a6a28982a$var$Cell;\nfunction $ee65a0057fd99531$export$34dfa8a1622185a4(props) {\n  var _props$selectionMode2 = props.selectionMode,\n    selectionMode = _props$selectionMode2 === void 0 ? \"none\" : _props$selectionMode2,\n    showSelectionCheckboxes = props.showSelectionCheckboxes,\n    showDragButtons = props.showDragButtons,\n    propExpandedKeys = props.UNSTABLE_expandedKeys,\n    propDefaultExpandedKeys = props.UNSTABLE_defaultExpandedKeys,\n    UNSTABLE_onExpandedChange = props.UNSTABLE_onExpandedChange,\n    children = props.children;\n  if (!(0, $1BfjW$tableNestedRows)()) throw new Error(\"Feature flag for table nested rows must be enabled to use useTreeGridState.\");\n  var _ref25 = (0, $1BfjW$useControlledState)(propExpandedKeys ? $ee65a0057fd99531$var$convertExpanded(propExpandedKeys) : undefined, propDefaultExpandedKeys ? $ee65a0057fd99531$var$convertExpanded(propDefaultExpandedKeys) : new Set(), UNSTABLE_onExpandedChange),\n    _ref26 = _slicedToArray(_ref25, 2),\n    expandedKeys = _ref26[0],\n    setExpandedKeys = _ref26[1];\n  var context = (0, $1BfjW$useMemo)(function () {\n    return {\n      showSelectionCheckboxes: showSelectionCheckboxes && selectionMode !== \"none\",\n      showDragButtons: showDragButtons,\n      selectionMode: selectionMode,\n      columns: []\n    };\n  }, [children, showSelectionCheckboxes, selectionMode, showDragButtons]);\n  var builder = (0, $1BfjW$useMemo)(function () {\n    return new (0, $1BfjW$CollectionBuilder)();\n  }, []);\n  var nodes = (0, $1BfjW$useMemo)(function () {\n    return builder.build({\n      children: children\n    }, context);\n  }, [builder, children, context]);\n  var treeGridCollection = (0, $1BfjW$useMemo)(function () {\n    return $ee65a0057fd99531$var$generateTreeGridCollection(nodes, {\n      showSelectionCheckboxes: showSelectionCheckboxes,\n      showDragButtons: showDragButtons,\n      expandedKeys: expandedKeys\n    });\n  }, [nodes, showSelectionCheckboxes, showDragButtons, expandedKeys]);\n  var onToggle = function onToggle(key) {\n    setExpandedKeys($ee65a0057fd99531$var$toggleKey(expandedKeys, key, treeGridCollection));\n  };\n  var collection = (0, $1BfjW$useMemo)(function () {\n    return new (0, $788781baa30117fa$export$596e1b2e2cf93690)(treeGridCollection.tableNodes, null, context);\n  }, [context, treeGridCollection.tableNodes]);\n  var tableState = (0, $4a0dd036d492cee4$export$907bcc6c48325fd6)(_objectSpread(_objectSpread({}, props), {}, {\n    collection: collection\n  }));\n  return _objectSpread(_objectSpread({}, tableState), {}, {\n    keyMap: treeGridCollection.keyMap,\n    userColumnCount: treeGridCollection.userColumnCount,\n    expandedKeys: expandedKeys,\n    toggleKey: onToggle\n  });\n}\nfunction $ee65a0057fd99531$var$toggleKey(currentExpandedKeys, key, collection) {\n  var updatedExpandedKeys;\n  if (currentExpandedKeys === \"all\") {\n    updatedExpandedKeys = new Set(collection.flattenedRows.filter(function (row) {\n      return row.props.UNSTABLE_childItems || row.props.children.length > collection.userColumnCount;\n    }).map(function (row) {\n      return row.key;\n    }));\n    updatedExpandedKeys.delete(key);\n  } else {\n    updatedExpandedKeys = new Set(currentExpandedKeys);\n    if (updatedExpandedKeys.has(key)) updatedExpandedKeys.delete(key);else updatedExpandedKeys.add(key);\n  }\n  return updatedExpandedKeys;\n}\nfunction $ee65a0057fd99531$var$convertExpanded(expanded) {\n  if (!expanded) return new Set();\n  return expanded === \"all\" ? \"all\" : new Set(expanded);\n}\nfunction $ee65a0057fd99531$var$generateTreeGridCollection(nodes, opts) {\n  var _opts$expandedKeys = opts.expandedKeys,\n    expandedKeys = _opts$expandedKeys === void 0 ? new Set() : _opts$expandedKeys;\n  var body;\n  var flattenedRows = [];\n  var columnCount = 0;\n  var userColumnCount = 0;\n  var originalColumns = [];\n  var keyMap = new Map();\n  if (opts === null || opts === void 0 ? void 0 : opts.showSelectionCheckboxes) columnCount++;\n  if (opts === null || opts === void 0 ? void 0 : opts.showDragButtons) columnCount++;\n  var topLevelRows = [];\n  var visit = function visit(node) {\n    switch (node.type) {\n      case \"body\":\n        body = node;\n        keyMap.set(body.key, body);\n        break;\n      case \"column\":\n        if (!node.hasChildNodes) userColumnCount++;\n        break;\n      case \"item\":\n        topLevelRows.push(node);\n        return;\n    }\n    for (var child of node.childNodes) visit(child);\n  };\n  for (var node of nodes) {\n    if (node.type === \"column\") originalColumns.push(node);\n    visit(node);\n  }\n  columnCount += userColumnCount;\n  var globalRowCount = 0;\n  var visitNode = function visitNode(node, i) {\n    if (node.type === \"item\") {\n      var childNodes = [];\n      for (var child of node.childNodes) if (child.type === \"cell\") {\n        var cellClone = _objectSpread({}, child);\n        if (cellClone.index + 1 === columnCount) cellClone.nextKey = null;\n        childNodes.push(_objectSpread({}, cellClone));\n      }\n      var clone = _objectSpread(_objectSpread({}, node), {}, {\n        childNodes: childNodes,\n        parentKey: body.key,\n        level: 1,\n        index: globalRowCount++\n      });\n      flattenedRows.push(clone);\n    }\n    var newProps = {};\n    if (node.type !== \"placeholder\" && node.type !== \"column\") newProps[\"indexOfType\"] = i;\n    Object.assign(node, newProps);\n    keyMap.set(node.key, node);\n    var lastNode;\n    var rowIndex = 0;\n    for (var _child of node.childNodes) if (!(_child.type === \"item\" && expandedKeys !== \"all\" && !expandedKeys.has(node.key))) {\n      if (_child.parentKey == null) _child.parentKey = node.key;\n      if (lastNode) {\n        lastNode.nextKey = _child.key;\n        _child.prevKey = lastNode.key;\n      } else _child.prevKey = null;\n      if (_child.type === \"item\") visitNode(_child, rowIndex++);else visitNode(_child, _child.index);\n      lastNode = _child;\n    }\n    if (lastNode) lastNode.nextKey = null;\n  };\n  var last;\n  topLevelRows.forEach(function (node, i) {\n    visitNode(node, i);\n    if (last) {\n      last.nextKey = node.key;\n      node.prevKey = last.key;\n    } else node.prevKey = null;\n    last = node;\n  });\n  if (last) last.nextKey = null;\n  return {\n    keyMap: keyMap,\n    userColumnCount: userColumnCount,\n    flattenedRows: flattenedRows,\n    tableNodes: [].concat(originalColumns, [_objectSpread(_objectSpread({}, body), {}, {\n      childNodes: flattenedRows\n    })])\n  };\n}\nexport { $292bc4e09cd0eb62$export$cb895dcf85db1319 as useTableColumnResizeState, $4a0dd036d492cee4$export$907bcc6c48325fd6 as useTableState, $312ae3b56a94a86e$export$f850895b287ef28e as TableHeader, $4ae5314bf50db1a3$export$76ccd210b9029917 as TableBody, $1cd244557c2f97d5$export$816b5d811295e6bc as Column, $70d70eb16ea48428$export$b59bdbef9ce70de2 as Row, $941d1d9a6a28982a$export$f6f0c3fe4ec306ea as Cell, $6555104ff085bef4$re_export$Section as Section, $788781baa30117fa$export$596e1b2e2cf93690 as TableCollection, $788781baa30117fa$export$7c127db850d4e81e as buildHeaderRows, $a9e7ae544a4e41dd$export$7ff77a162970b30e as TableColumnLayout, $ee65a0057fd99531$export$34dfa8a1622185a4 as UNSTABLE_useTreeGridState };","map":{"version":3,"names":["$6818b1c4fc67028d$export$1994a077b98ee0d5","width","isNaN","String","match","$6818b1c4fc67028d$export$9078bad4c3934604","console","warn","parseFloat","$6818b1c4fc67028d$export$7bbad27896f7ae9f","tableWidth","Error","$6818b1c4fc67028d$export$59185c62a7544aa0","maxWidth","Number","MAX_SAFE_INTEGER","$6818b1c4fc67028d$export$f556054ce4358701","minWidth","$6818b1c4fc67028d$export$55d50dc687385491","availableWidth","columns","changedColumns","getDefaultWidth","getDefaultMinWidth","hasNonFrozenItems","flexItems","map","column","index","_column_width","_ref","_ref1","get","key","defaultWidth","frozen","baseSize","flex","targetMainSize","_column_minWidth","_ref2","min","max","hypotheticalMainSize","Math","violation","_loop","usedWidth","flexFactors","forEach","item","remainingFreeSpace","ratio","totalViolation","sign","$6818b1c4fc67028d$var$cascadeRounding","fpTotal","intTotal","roundedArray","float","integer","round","push","$a9e7ae544a4e41dd$export$7ff77a162970b30e","options","_classCallCheck","columnWidths","Map","columnMinWidths","columnMaxWidths","_options_getDefaultWidth","_options_getDefaultMinWidth","_createClass","value","splitColumnsIntoControlledAndUncontrolled","reduce","acc","col","props","set","recombineColumns","uncontrolledWidths","uncontrolledColumns","controlledColumns","has","getInitialUncontrolledWidths","_this2","Array","from","_ref3","_ref4","_slicedToArray","_this_getDefaultWidth","_this","_col_props_defaultWidth","call","getColumnWidth","_this_columnWidths_get","getColumnMinWidth","_this_columnMinWidths_get","getColumnMaxWidth","_this_columnMaxWidths_get","resizeColumnWidth","collection","controlledWidths","_this3","arguments","length","undefined","prevColumnWidths","resizeIndex","Infinity","resizingChanged","concat","_toConsumableArray","percentKeys","frKeysToTheRight","minWidths","i","_column_props_width_endsWith","_column_props_width","frKey","frValue","endsWith","floor","_objectSpread","newWidths","_ref5","_ref6","_ref7","_ref8","buildColumnWidths","widths","_this4","_column_props_minWidth","$292bc4e09cd0eb62$export$cb895dcf85db1319","state","_props$tableWidth","_ref9","$1BfjW$useState","_ref10","resizingColumn","setResizingColumn","columnLayout","$1BfjW$useMemo","_ref11","_ref12","_ref13","_ref14","setUncontrolledWidths","_ref15","_ref16","lastColumns","setLastColumns","some","c","newUncontrolledWidths","colWidths","startResize","$1BfjW$useCallback","updateResizedColumns","newControlled","_ref17","_ref18","entry","newSizes","_ref19","_ref20","endResize","tableState","$788781baa30117fa$var$ROW_HEADER_COLUMN_KEY","random","toString","slice","$788781baa30117fa$var$ROW_HEADER_COLUMN_KEY_DRAG","$788781baa30117fa$export$7c127db850d4e81e","keyMap","columnNodes","seen","parentKey","parent","colspan","_seen$get","splice","maxLength","apply","headerRows","fill","colIndex","row","rowLength","p","placeholder","type","rendered","level","hasChildNodes","childNodes","textValue","nextKey","prevKey","$788781baa30117fa$export$596e1b2e2cf93690","_ref21","nodes","prev","opts","_this5","rowHeaderColumnKeys","Set","body","showSelectionCheckboxes","rowHeaderColumn","showDragButtons","isSelectionCell","unshift","isDragButtonCell","rows","columnKeyMap","visit","node","isRowHeader","add","child","_callSuper","columnCount","items","visitNode","_size","size","find","_column_props","_column_props1","_inherits","Symbol","iterator","getKeys","keys","getKeyBefore","getKeyAfter","getFirstKey","_getFirstItem","$1BfjW$getFirstItem","getLastKey","_getLastItem","$1BfjW$getLastItem","getItem","at","idx","getTextValue","text","cell","join","$1BfjW$GridCollection","$4a0dd036d492cee4$var$OPPOSITE_SORT_DIRECTION","ascending","descending","$4a0dd036d492cee4$export$907bcc6c48325fd6","_ref22","_ref23","isKeyboardNavigationDisabled","setKeyboardNavigationDisabled","_props$selectionMode","selectionMode","context","children","$1BfjW$useCollection","_ref24","$1BfjW$useGridState","disabledBehavior","disabledKeys","selectionManager","sortDescriptor","sort","columnKey","direction","_props_sortDescriptor","onSortChange","$312ae3b56a94a86e$var$TableHeader","getCollectionNode","renderer","$1BfjW$react","Children","element","$312ae3b56a94a86e$export$f850895b287ef28e","$4ae5314bf50db1a3$var$TableBody","$4ae5314bf50db1a3$export$76ccd210b9029917","$1cd244557c2f97d5$var$Column","title","childColumns","fullNodes","count","shouldInvalidate","newContext","updateContext","$1cd244557c2f97d5$export$816b5d811295e6bc","$70d70eb16ea48428$var$Row","UNSTABLE_childItems","cells","childRows","$70d70eb16ea48428$export$b59bdbef9ce70de2","$941d1d9a6a28982a$var$Cell","$941d1d9a6a28982a$export$f6f0c3fe4ec306ea","$ee65a0057fd99531$export$34dfa8a1622185a4","_props$selectionMode2","propExpandedKeys","UNSTABLE_expandedKeys","propDefaultExpandedKeys","UNSTABLE_defaultExpandedKeys","UNSTABLE_onExpandedChange","$1BfjW$tableNestedRows","_ref25","$1BfjW$useControlledState","$ee65a0057fd99531$var$convertExpanded","_ref26","expandedKeys","setExpandedKeys","builder","$1BfjW$CollectionBuilder","build","treeGridCollection","$ee65a0057fd99531$var$generateTreeGridCollection","onToggle","$ee65a0057fd99531$var$toggleKey","tableNodes","userColumnCount","toggleKey","currentExpandedKeys","updatedExpandedKeys","flattenedRows","filter","delete","expanded","_opts$expandedKeys","originalColumns","topLevelRows","globalRowCount","cellClone","clone","newProps","Object","assign","lastNode","rowIndex","last"],"sources":["D:\\React Native\\Expo+glustack\\NoteSketch\\node_modules\\@react-stately\\table\\dist\\packages\\@react-stately\\table\\src\\index.ts","D:\\React Native\\Expo+glustack\\NoteSketch\\node_modules\\@react-stately\\table\\dist\\packages\\@react-stately\\table\\src\\useTableColumnResizeState.ts","D:\\React Native\\Expo+glustack\\NoteSketch\\node_modules\\@react-stately\\table\\dist\\packages\\@react-stately\\table\\src\\TableColumnLayout.ts","D:\\React Native\\Expo+glustack\\NoteSketch\\node_modules\\@react-stately\\table\\dist\\packages\\@react-stately\\table\\src\\TableUtils.ts","D:\\React Native\\Expo+glustack\\NoteSketch\\node_modules\\@react-stately\\table\\dist\\packages\\@react-stately\\table\\src\\useTableState.ts","D:\\React Native\\Expo+glustack\\NoteSketch\\node_modules\\@react-stately\\table\\dist\\packages\\@react-stately\\table\\src\\TableCollection.ts","D:\\React Native\\Expo+glustack\\NoteSketch\\node_modules\\@react-stately\\table\\dist\\packages\\@react-stately\\table\\src\\TableHeader.ts","D:\\React Native\\Expo+glustack\\NoteSketch\\node_modules\\@react-stately\\table\\dist\\packages\\@react-stately\\table\\src\\TableBody.ts","D:\\React Native\\Expo+glustack\\NoteSketch\\node_modules\\@react-stately\\table\\dist\\packages\\@react-stately\\table\\src\\Column.ts","D:\\React Native\\Expo+glustack\\NoteSketch\\node_modules\\@react-stately\\table\\dist\\packages\\@react-stately\\table\\src\\Row.ts","D:\\React Native\\Expo+glustack\\NoteSketch\\node_modules\\@react-stately\\table\\dist\\packages\\@react-stately\\table\\src\\Cell.ts","D:\\React Native\\Expo+glustack\\NoteSketch\\node_modules\\@react-stately\\table\\dist\\packages\\@react-stately\\table\\src\\useTreeGridState.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport type {TableColumnResizeState, TableColumnResizeStateProps} from './useTableColumnResizeState';\nexport type {TableState, CollectionBuilderContext, TableStateProps} from './useTableState';\nexport type {TableHeaderProps, TableBodyProps, ColumnProps, RowProps, CellProps} from '@react-types/table';\nexport type {TreeGridState, TreeGridStateProps} from './useTreeGridState';\n\nexport {useTableColumnResizeState} from './useTableColumnResizeState';\nexport {useTableState} from './useTableState';\nexport {TableHeader} from './TableHeader';\nexport {TableBody} from './TableBody';\nexport {Column} from './Column';\nexport {Row} from './Row';\nexport {Cell} from './Cell';\nexport {Section} from '@react-stately/collections';\nexport {TableCollection, buildHeaderRows} from './TableCollection';\nexport {TableColumnLayout} from './TableColumnLayout';\nexport {UNSTABLE_useTreeGridState} from './useTreeGridState';\n","/*\n * Copyright 2022 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {ColumnSize} from '@react-types/table';\nimport {GridNode} from '@react-types/grid';\nimport {Key} from '@react-types/shared';\nimport {TableColumnLayout} from './TableColumnLayout';\nimport {TableState} from './useTableState';\nimport {useCallback, useMemo, useState} from 'react';\n\nexport interface TableColumnResizeStateProps<T> {\n  /**\n   * Current width of the table or table viewport that the columns\n   * should be calculated against.\n   */\n  tableWidth: number,\n  /** A function that is called to find the default width for a given column. */\n  getDefaultWidth?: (node: GridNode<T>) => ColumnSize | null | undefined,\n  /** A function that is called to find the default minWidth for a given column. */\n  getDefaultMinWidth?: (node: GridNode<T>) => ColumnSize | null | undefined\n}\nexport interface TableColumnResizeState<T> {\n  /**\n   * Called to update the state that a resize event has occurred.\n   * Returns the new widths for all columns based on the resized column.\n   */\n  updateResizedColumns: (key: Key, width: number) => Map<Key, ColumnSize>,\n  /** Callback for when onColumnResize has started. */\n  startResize: (key: Key) => void,\n  /** Callback for when onColumnResize has ended. */\n  endResize: () => void,\n  /** Gets the current width for the specified column. */\n  getColumnWidth: (key: Key) => number,\n  /** Gets the current minWidth for the specified column. */\n  getColumnMinWidth: (key: Key) => number,\n  /** Gets the current maxWidth for the specified column. */\n  getColumnMaxWidth: (key: Key) => number,\n  /** Key of the currently resizing column. */\n  resizingColumn: Key | null,\n  /** A reference to the table state. */\n  tableState: TableState<T>\n}\n\n/**\n * Provides column width state management for a table component with column resizing support. Handles building\n * a map of column widths calculated from the table's width and any provided column width information from the collection.\n * In addition, it tracks the currently resizing column and provides callbacks for updating the widths upon resize operations.\n * @param props - Props for the table.\n * @param state - State for the table, as returned by `useTableState`.\n */\nexport function useTableColumnResizeState<T>(props: TableColumnResizeStateProps<T>, state: TableState<T>): TableColumnResizeState<T> {\n  let {\n    getDefaultWidth,\n    getDefaultMinWidth,\n    tableWidth = 0\n  } = props;\n\n  let [resizingColumn, setResizingColumn] = useState<Key | null>(null);\n  let columnLayout = useMemo(\n    () => new TableColumnLayout({\n      getDefaultWidth,\n      getDefaultMinWidth\n    }),\n    [getDefaultWidth, getDefaultMinWidth]\n  );\n\n  let [controlledColumns, uncontrolledColumns] = useMemo(() =>\n      columnLayout.splitColumnsIntoControlledAndUncontrolled(state.collection.columns)\n  , [state.collection.columns, columnLayout]);\n\n  // uncontrolled column widths\n  let [uncontrolledWidths, setUncontrolledWidths] = useState(() =>\n    columnLayout.getInitialUncontrolledWidths(uncontrolledColumns)\n  );\n\n  // Update uncontrolled widths if the columns changed.\n  let [lastColumns, setLastColumns] = useState(state.collection.columns);\n  if (state.collection.columns !== lastColumns) {\n    if (\n      state.collection.columns.length !== lastColumns.length ||\n      state.collection.columns.some((c, i) => c.key !== lastColumns[i].key)\n    ) {\n      let newUncontrolledWidths = columnLayout.getInitialUncontrolledWidths(uncontrolledColumns);\n      setUncontrolledWidths(newUncontrolledWidths);\n    }\n    setLastColumns(state.collection.columns);\n  }\n\n  // combine columns back into one map that maintains same order as the columns\n  let colWidths = useMemo(() =>\n      columnLayout.recombineColumns(state.collection.columns, uncontrolledWidths, uncontrolledColumns, controlledColumns)\n  , [state.collection.columns, uncontrolledWidths, uncontrolledColumns, controlledColumns, columnLayout]);\n\n  let startResize = useCallback((key: Key) => {\n    setResizingColumn(key);\n  }, [setResizingColumn]);\n\n  let updateResizedColumns = useCallback((key: Key, width: number): Map<Key, ColumnSize> => {\n    let newControlled = new Map(Array.from(controlledColumns).map(([key, entry]) => [key, entry.props.width]));\n    let newSizes = columnLayout.resizeColumnWidth(tableWidth, state.collection, newControlled, uncontrolledWidths, key, width);\n\n    let map = new Map(Array.from(uncontrolledColumns).map(([key]) => [key, newSizes.get(key)]));\n    map.set(key, width);\n    setUncontrolledWidths(map);\n    return newSizes;\n  }, [controlledColumns, uncontrolledColumns, setUncontrolledWidths, tableWidth, columnLayout, state.collection, uncontrolledWidths]);\n\n  let endResize = useCallback(() => {\n    setResizingColumn(null);\n  }, [setResizingColumn]);\n\n  useMemo(() =>\n    columnLayout.buildColumnWidths(tableWidth, state.collection, colWidths)\n  , [tableWidth, state.collection, colWidths, columnLayout]);\n\n  return useMemo(() => ({\n    resizingColumn,\n    updateResizedColumns,\n    startResize,\n    endResize,\n    getColumnWidth: (key: Key) =>\n      columnLayout.getColumnWidth(key),\n    getColumnMinWidth: (key: Key) =>\n      columnLayout.getColumnMinWidth(key),\n    getColumnMaxWidth: (key: Key) =>\n      columnLayout.getColumnMaxWidth(key),\n    tableState: state\n  }), [\n    columnLayout,\n    resizingColumn,\n    updateResizedColumns,\n    startResize,\n    endResize,\n    state\n  ]);\n}\n","/*\n * Copyright 2022 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {\n  calculateColumnSizes,\n  getMaxWidth,\n  getMinWidth,\n  isStatic,\n  parseFractionalUnit\n} from './TableUtils';\nimport {ColumnSize, TableCollection} from '@react-types/table';\nimport {GridNode} from '@react-types/grid';\nimport {Key} from '@react-types/shared';\n\nexport interface TableColumnLayoutOptions<T> {\n  getDefaultWidth?: (column: GridNode<T>) => ColumnSize | null | undefined,\n  getDefaultMinWidth?: (column: GridNode<T>) => ColumnSize | null | undefined\n}\n\nexport class TableColumnLayout<T> {\n  getDefaultWidth: (column: GridNode<T>) => ColumnSize | null | undefined;\n  getDefaultMinWidth: (column: GridNode<T>) => ColumnSize | null | undefined;\n  columnWidths: Map<Key, number> = new Map();\n  columnMinWidths: Map<Key, number> = new Map();\n  columnMaxWidths: Map<Key, number> = new Map();\n\n  constructor(options: TableColumnLayoutOptions<T>) {\n    this.getDefaultWidth = options?.getDefaultWidth ?? (() => '1fr');\n    this.getDefaultMinWidth = options?.getDefaultMinWidth ?? (() => 75);\n  }\n\n  /** Takes an array of columns and splits it into 2 maps of columns with controlled and columns with uncontrolled widths. */\n  splitColumnsIntoControlledAndUncontrolled(columns: Array<GridNode<T>>): [Map<Key, GridNode<T>>, Map<Key, GridNode<T>>] {\n    return columns.reduce((acc, col) => {\n      if (col.props.width != null) {\n        acc[0].set(col.key, col);\n      } else {\n        acc[1].set(col.key, col);\n      }\n      return acc;\n    }, [new Map(), new Map()]);\n  }\n\n  /** Takes uncontrolled and controlled widths and joins them into a single Map. */\n  recombineColumns(columns: Array<GridNode<T>>, uncontrolledWidths: Map<Key, ColumnSize>, uncontrolledColumns: Map<Key, GridNode<T>>, controlledColumns: Map<Key, GridNode<T>>): Map<Key, ColumnSize> {\n    return new Map(columns.map(col => {\n      if (uncontrolledColumns.has(col.key)) {\n        return [col.key, uncontrolledWidths.get(col.key)];\n      } else {\n        return [col.key, controlledColumns.get(col.key).props.width];\n      }\n    }));\n  }\n\n  /** Used to make an initial Map of the uncontrolled widths based on default widths. */\n  getInitialUncontrolledWidths(uncontrolledColumns: Map<Key, GridNode<T>>): Map<Key, ColumnSize> {\n    return new Map(Array.from(uncontrolledColumns).map(([key, col]) =>\n      [key, col.props.defaultWidth ?? this.getDefaultWidth?.(col) ?? '1fr']\n    ));\n  }\n\n  getColumnWidth(key: Key): number {\n    return this.columnWidths.get(key) ?? 0;\n  }\n\n  getColumnMinWidth(key: Key): number {\n    return this.columnMinWidths.get(key) ?? 0;\n  }\n\n  getColumnMaxWidth(key: Key): number {\n    return this.columnMaxWidths.get(key) ?? 0;\n  }\n\n  resizeColumnWidth(tableWidth: number, collection: TableCollection<T>, controlledWidths: Map<Key, ColumnSize>, uncontrolledWidths: Map<Key, ColumnSize>, col = null, width: number): Map<Key, ColumnSize> {\n    let prevColumnWidths = this.columnWidths;\n    // resizing a column\n    let resizeIndex = Infinity;\n    let resizingChanged = new Map<Key, ColumnSize>([...controlledWidths, ...uncontrolledWidths]);\n    let percentKeys = new Map();\n    let frKeysToTheRight = new Map();\n    let minWidths = new Map();\n    // freeze columns to the left to their previous pixel value\n    collection.columns.forEach((column, i) => {\n      let frKey;\n      let frValue;\n      minWidths.set(column.key, this.getDefaultMinWidth(collection.columns[i]));\n      if (col !== column.key && !column.props.width && !isStatic(uncontrolledWidths.get(column.key))) {\n        // uncontrolled don't have props.width for us, so instead get from our state\n        frKey = column.key;\n        frValue = parseFractionalUnit(uncontrolledWidths.get(column.key) as string);\n      } else if (col !== column.key && !isStatic(column.props.width) && !uncontrolledWidths.get(column.key)) {\n        // controlledWidths will be the same in the collection\n        frKey = column.key;\n        frValue = parseFractionalUnit(column.props.width);\n      } else if (col !== column.key && column.props.width?.endsWith?.('%')) {\n        percentKeys.set(column.key, column.props.width);\n      }\n      // don't freeze columns to the right of the resizing one\n      if (resizeIndex < i) {\n        if (frKey) {\n          frKeysToTheRight.set(frKey, frValue);\n        }\n        return;\n      }\n      // we already know the new size of the resizing column\n      if (column.key === col) {\n        resizeIndex = i;\n        resizingChanged.set(column.key, Math.floor(width));\n        return;\n      }\n      // freeze column to previous value\n      resizingChanged.set(column.key, prevColumnWidths.get(column.key));\n    });\n\n    // predict pixels sizes for all columns based on resize\n    let columnWidths = calculateColumnSizes(\n      tableWidth,\n      collection.columns.map(col => ({...col.props, key: col.key})),\n      resizingChanged,\n      (i) => this.getDefaultWidth(collection.columns[i]),\n      (i) => this.getDefaultMinWidth(collection.columns[i])\n    );\n\n    // set all new column widths for onResize event\n    // columns going in will be the same order as the columns coming out\n    let newWidths = new Map<Key, ColumnSize>();\n    // set all column widths based on calculateColumnSize\n    columnWidths.forEach((width, index) => {\n      let key = collection.columns[index].key;\n      newWidths.set(key, width);\n    });\n\n    // add FR's back as they were to columns to the right\n    Array.from(frKeysToTheRight).forEach(([key]) => {\n      newWidths.set(key, `${frKeysToTheRight.get(key)}fr`);\n    });\n\n    // put back in percents\n    Array.from(percentKeys).forEach(([key, width]) => {\n      // resizing locks a column to a px width\n      if (key === col) {\n        return;\n      }\n      newWidths.set(key, width);\n    });\n    return newWidths;\n  }\n\n  buildColumnWidths(tableWidth: number, collection: TableCollection<T>, widths: Map<Key, ColumnSize>) {\n    this.columnWidths = new Map();\n    this.columnMinWidths = new Map();\n    this.columnMaxWidths = new Map();\n\n    // initial layout or table/window resizing\n    let columnWidths = calculateColumnSizes(\n      tableWidth,\n      collection.columns.map(col => ({...col.props, key: col.key})),\n      widths,\n      (i) => this.getDefaultWidth(collection.columns[i]),\n      (i) => this.getDefaultMinWidth(collection.columns[i])\n    );\n\n    // columns going in will be the same order as the columns coming out\n    columnWidths.forEach((width, index) => {\n      let key = collection.columns[index].key;\n      let column = collection.columns[index];\n      this.columnWidths.set(key, width);\n      this.columnMinWidths.set(key, getMinWidth(column.props.minWidth ?? this.getDefaultMinWidth(column), tableWidth));\n      this.columnMaxWidths.set(key, getMaxWidth(column.props.maxWidth, tableWidth));\n    });\n    return this.columnWidths;\n  }\n}\n","/*\n * Copyright 2022 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {ColumnSize} from '@react-types/table';\nimport {Key} from '@react-types/shared';\n\n// numbers and percents are considered static. *fr units or a lack of units are considered dynamic.\nexport function isStatic(width: number | string): boolean {\n  return width != null && (!isNaN(width as number) || (String(width)).match(/^(\\d+)(?=%$)/) !== null);\n}\n\nexport function parseFractionalUnit(width: string): number {\n  if (!width) {\n    return 1;\n  }\n  let match = width.match(/^(.+)(?=fr$)/);\n  // if width is the incorrect format, just default it to a 1fr\n  if (!match) {\n    console.warn(`width: ${width} is not a supported format, width should be a number (ex. 150), percentage (ex. '50%') or fr unit (ex. '2fr')`,\n      'defaulting to \\'1fr\\'');\n    return 1;\n  }\n  return parseFloat(match[0]);\n}\n\nexport function parseStaticWidth(width: number | string, tableWidth: number): number {\n  if (typeof width === 'string') {\n    let match = width.match(/^(\\d+)(?=%$)/);\n    if (!match) {\n      throw new Error('Only percentages or numbers are supported for static column widths');\n    }\n    return tableWidth * (parseFloat(match[0]) / 100);\n  }\n  return width;\n}\n\n\nexport function getMaxWidth(maxWidth: number | string, tableWidth: number): number {\n  return maxWidth != null\n    ? parseStaticWidth(maxWidth, tableWidth)\n    : Number.MAX_SAFE_INTEGER;\n}\n\n// cannot support FR units, we'd need to know everything else in the table to do that\nexport function getMinWidth(minWidth: number | string, tableWidth: number): number {\n  return minWidth != null\n    ? parseStaticWidth(minWidth, tableWidth)\n    : 0;\n}\n\n\nexport interface IColumn {\n  minWidth?: number | string,\n  maxWidth?: number | string,\n  width?: number | string,\n  defaultWidth?: number | string,\n  key?: Key\n}\n\n/**\n * Implements the flex algorithm described in https://www.w3.org/TR/css-flexbox-1/#layout-algorithm\n * It makes a few constraint/assumptions:\n * 1. All basis values are 0 unless it is a static width, then the basis is the static width\n * 2. All flex grow and shrink values are equal to the FR specified on the column, grow and shrink for the same column are equal\n * 3. We only have one row\n * An example of the setup can be seen here https://jsfiddle.net/snowystinger/wv0ymjaf/61/ where I let the browser figure out the\n * flex of the columns.\n * Note: We differ in one key aspect, all of our column widths must be whole numbers, so we avoid browser\n * sub pixel rounding errors. To do this, we use a cascading rounding algorithm to ensure that the sum of the widths is maintained\n * while distributing the rounding remainder across the columns.\n *\n * As noted in the chrome source code, this algorithm is very accurate, but has the potential to be quadratic.\n * They have deemed this to be acceptable because the number of elements is usually small and the flex factors\n * are usually not high variance. I believe we can make the same assumptions. Particularly once resizing is\n * started, it will convert all columns to the left to static widths, so it will cut down on the number of FR columns.\n *\n * There are likely faster ways to do this, I've chosen to stick to the spec as closely as possible for readability, accuracy, and for the\n * note that this behaving quadratically is unlikely to be a problem.\n * @param availableWidth - The visible width of the table.\n * @param columns - The table defined columns.\n * @param changedColumns - Any columns we want to override, for example, during resizing.\n * @param getDefaultWidth - A function that returns the default width of a column by its index.\n * @param getDefaultMinWidth - A function that returns the default min width of a column by its index.\n */\nexport function calculateColumnSizes(availableWidth: number, columns: IColumn[], changedColumns: Map<Key, ColumnSize>, getDefaultWidth, getDefaultMinWidth) {\n  let hasNonFrozenItems = false;\n  let flexItems = columns.map((column, index) => {\n    let width = changedColumns.get(column.key) != null ? changedColumns.get(column.key) : column.width ?? column.defaultWidth ?? getDefaultWidth?.(index) ?? '1fr';\n    let frozen = false;\n    let baseSize = 0;\n    let flex = 0;\n    let targetMainSize = null;\n    if (isStatic(width)) {\n      baseSize = parseStaticWidth(width, availableWidth);\n      frozen = true;\n    } else {\n      flex = parseFractionalUnit(width);\n      if (flex <= 0) {\n        frozen = true;\n      }\n    }\n\n    let min = getMinWidth(column.minWidth ?? getDefaultMinWidth?.(index) ?? 0, availableWidth);\n    let max = getMaxWidth(column.maxWidth, availableWidth);\n    let hypotheticalMainSize = Math.max(min, Math.min(baseSize, max));\n\n    // 9.7.1\n    // We don't make use of flex basis, it's always 0, so we are always in 'grow' mode.\n    // 9.7.2\n    if (frozen) {\n      targetMainSize = hypotheticalMainSize;\n    } else if (baseSize > hypotheticalMainSize) {\n      frozen = true;\n      targetMainSize = hypotheticalMainSize;\n    }\n\n    // 9.7.3\n    if (!frozen) {\n      hasNonFrozenItems = true;\n    }\n    return {\n      frozen,\n      baseSize,\n      hypotheticalMainSize,\n      min,\n      max,\n      flex,\n      targetMainSize,\n      violation: 0\n    };\n  });\n\n  // 9.7.4\n  // 9.7.4.a\n  while (hasNonFrozenItems) {\n    // 9.7.4.b\n    /**\n     * Calculate the remaining free space as for initial free space,\n     * above (9.7.3). If the sum of the unfrozen flex items’ flex factors is\n     * less than one, multiply the initial free space by this sum (of flex factors).\n     * If the magnitude of this value is less than the magnitude of\n     * the remaining free space, use this as the remaining free space.\n     */\n    let usedWidth = 0;\n    let flexFactors = 0;\n    flexItems.forEach(item => {\n      if (item.frozen) {\n        usedWidth += item.targetMainSize;\n      } else {\n        usedWidth += item.baseSize;\n        flexFactors += item.flex;\n      }\n    });\n\n    let remainingFreeSpace = availableWidth - usedWidth;\n    // we only support integer FR's, and because of hasNonFrozenItems, we know that flexFactors > 0\n    // so no need to check for flexFactors < 1\n    // 9.7.4.c\n    /**\n     * If the remaining free space is zero\n     * - Do nothing.\n     * Else // remember, we're always in grow mode\n     * - Find the ratio of the item’s flex grow factor to the\n     * sum of the flex grow factors of all unfrozen items on\n     * the line. Set the item’s target main size to its flex\n     * base size plus a fraction of the remaining free space\n     * proportional to the ratio.\n     */\n    if (remainingFreeSpace > 0) {\n      flexItems.forEach((item) => {\n        if (!item.frozen) {\n          let ratio = item.flex / flexFactors;\n          item.targetMainSize = item.baseSize + (ratio * remainingFreeSpace);\n        }\n      });\n    }\n\n    // 9.7.4.d\n    /**\n     * Fix min/max violations. Clamp each non-frozen item’s\n     * target main size by its used min and max main sizes\n     * and floor its content-box size at zero. If the item’s\n     * target main size was made smaller by this, it’s a max\n     * violation. If the item’s target main size was made\n     * larger by this, it’s a min violation.\n     */\n    let totalViolation = 0;\n    flexItems.forEach(item => {\n      item.violation = 0;\n      if (!item.frozen) {\n        let {min, max, targetMainSize} = item;\n        item.targetMainSize = Math.max(min, Math.min(targetMainSize, max));\n\n        item.violation = item.targetMainSize - targetMainSize;\n        totalViolation += item.violation;\n      }\n    });\n\n    // 9.7.4.e\n    /**\n     * Freeze over-flexed items. The total violation is the\n     * sum of the adjustments from the previous step\n     * ∑(clamped size - unclamped size). If the total violation is:\n     * Zero\n     * - Freeze all items.\n     *\n     * Positive\n     * - Freeze all the items with min violations.\n     *\n     * Negative\n     * - Freeze all the items with max violations.\n     */\n    hasNonFrozenItems = false;\n    flexItems.forEach(item => {\n      if (totalViolation === 0 || Math.sign(totalViolation) === Math.sign(item.violation)) {\n        item.frozen = true;\n      } else if (!item.frozen) {\n        hasNonFrozenItems = true;\n      }\n    });\n  }\n\n  return cascadeRounding(flexItems);\n}\n\nfunction cascadeRounding(flexItems): number[] {\n  /*\n  Given an array of floats that sum to an integer, this rounds the floats\n  and returns an array of integers with the same sum.\n  */\n\n  let fpTotal = 0;\n  let intTotal = 0;\n  let roundedArray = [];\n  flexItems.forEach(function (item) {\n    let float = item.targetMainSize;\n    let integer = Math.round(float + fpTotal) - intTotal;\n    fpTotal += float;\n    intTotal += integer;\n    roundedArray.push(integer);\n  });\n\n  return roundedArray;\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {GridState, useGridState} from '@react-stately/grid';\nimport {TableCollection as ITableCollection, TableBodyProps, TableHeaderProps} from '@react-types/table';\nimport {Key, Node, SelectionMode, Sortable, SortDescriptor, SortDirection} from '@react-types/shared';\nimport {MultipleSelectionStateProps} from '@react-stately/selection';\nimport {ReactElement, useCallback, useMemo, useState} from 'react';\nimport {TableCollection} from './TableCollection';\nimport {useCollection} from '@react-stately/collections';\n\nexport interface TableState<T> extends GridState<T, ITableCollection<T>> {\n  /** A collection of rows and columns in the table. */\n  collection: ITableCollection<T>,\n  /** Whether the row selection checkboxes should be displayed. */\n  showSelectionCheckboxes: boolean,\n  /** The current sorted column and direction. */\n  sortDescriptor: SortDescriptor,\n  /** Calls the provided onSortChange handler with the provided column key and sort direction. */\n  sort(columnKey: Key, direction?: 'ascending' | 'descending'): void,\n  /** Whether keyboard navigation is disabled, such as when the arrow keys should be handled by a component within a cell. */\n  isKeyboardNavigationDisabled: boolean,\n  /** Set whether keyboard navigation is disabled, such as when the arrow keys should be handled by a component within a cell. */\n  setKeyboardNavigationDisabled: (val: boolean) => void\n}\n\nexport interface CollectionBuilderContext<T> {\n  showSelectionCheckboxes: boolean,\n  showDragButtons: boolean,\n  selectionMode: SelectionMode,\n  columns: Node<T>[]\n}\n\nexport interface TableStateProps<T> extends MultipleSelectionStateProps, Sortable {\n  /** The elements that make up the table. Includes the TableHeader, TableBody, Columns, and Rows. */\n  children?: [ReactElement<TableHeaderProps<T>>, ReactElement<TableBodyProps<T>>],\n  /** A list of row keys to disable. */\n  disabledKeys?: Iterable<Key>,\n  /** A pre-constructed collection to use instead of building one from items and children. */\n  collection?: ITableCollection<T>,\n  /** Whether the row selection checkboxes should be displayed. */\n  showSelectionCheckboxes?: boolean,\n  /** Whether the row drag button should be displayed.\n   * @private\n   */\n  showDragButtons?: boolean\n}\n\nconst OPPOSITE_SORT_DIRECTION = {\n  ascending: 'descending' as SortDirection,\n  descending: 'ascending' as SortDirection\n};\n\n/**\n * Provides state management for a table component. Handles building a collection\n * of columns and rows from props. In addition, it tracks row selection and manages sort order changes.\n */\nexport function useTableState<T extends object>(props: TableStateProps<T>): TableState<T> {\n  let [isKeyboardNavigationDisabled, setKeyboardNavigationDisabled] = useState(false);\n  let {selectionMode = 'none', showSelectionCheckboxes, showDragButtons} = props;\n\n  let context = useMemo(() => ({\n    showSelectionCheckboxes: showSelectionCheckboxes && selectionMode !== 'none',\n    showDragButtons: showDragButtons,\n    selectionMode,\n    columns: []\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }), [props.children, showSelectionCheckboxes, selectionMode, showDragButtons]);\n\n  let collection = useCollection<T, ITableCollection<T>>(\n    props,\n    useCallback((nodes) => new TableCollection(nodes, null, context), [context]),\n    context\n  );\n  let {disabledKeys, selectionManager} = useGridState({\n    ...props,\n    collection,\n    disabledBehavior: props.disabledBehavior || 'selection'\n  });\n\n  return {\n    collection,\n    disabledKeys,\n    selectionManager,\n    showSelectionCheckboxes: props.showSelectionCheckboxes || false,\n    sortDescriptor: props.sortDescriptor,\n    isKeyboardNavigationDisabled: collection.size === 0 || isKeyboardNavigationDisabled,\n    setKeyboardNavigationDisabled,\n    sort(columnKey: Key, direction?: 'ascending' | 'descending') {\n      props.onSortChange({\n        column: columnKey,\n        direction: direction ?? (props.sortDescriptor?.column === columnKey\n          ? OPPOSITE_SORT_DIRECTION[props.sortDescriptor.direction]\n          : 'ascending')\n      });\n    }\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {getFirstItem, getLastItem} from '@react-stately/collections';\nimport {GridCollection} from '@react-stately/grid';\nimport {GridNode} from '@react-types/grid';\nimport {TableCollection as ITableCollection} from '@react-types/table';\nimport {Key} from '@react-types/shared';\n\ninterface GridCollectionOptions {\n  showSelectionCheckboxes?: boolean,\n  showDragButtons?: boolean\n}\n\nconst ROW_HEADER_COLUMN_KEY = 'row-header-column-' + Math.random().toString(36).slice(2);\nlet ROW_HEADER_COLUMN_KEY_DRAG = 'row-header-column-' + Math.random().toString(36).slice(2);\nwhile (ROW_HEADER_COLUMN_KEY === ROW_HEADER_COLUMN_KEY_DRAG) {\n  ROW_HEADER_COLUMN_KEY_DRAG = 'row-header-column-' + Math.random().toString(36).slice(2);\n}\n\n/** @private */\nexport function buildHeaderRows<T>(keyMap: Map<Key, GridNode<T>>, columnNodes: GridNode<T>[]): GridNode<T>[] {\n  if (columnNodes.length === 0) {\n    return [];\n  }\n\n  let columns: GridNode<T>[][] = [];\n  let seen = new Map();\n  for (let column of columnNodes) {\n    let parentKey = column.parentKey;\n    let col = [column];\n\n    while (parentKey) {\n      let parent: GridNode<T> = keyMap.get(parentKey);\n      if (!parent) {\n        break;\n      }\n\n      // If we've already seen this parent, than it is shared\n      // with a previous column. If the current column is taller\n      // than the previous column, than we need to shift the parent\n      // in the previous column so it's level with the current column.\n      if (seen.has(parent)) {\n        parent.colspan++;\n\n        let {column, index} = seen.get(parent);\n        if (index > col.length) {\n          break;\n        }\n\n        for (let i = index; i < col.length; i++) {\n          column.splice(i, 0, null);\n        }\n\n        // Adjust shifted indices\n        for (let i = col.length; i < column.length; i++) {\n          // eslint-disable-next-line max-depth\n          if (column[i] && seen.has(column[i])) {\n            seen.get(column[i]).index = i;\n          }\n        }\n      } else {\n        parent.colspan = 1;\n        col.push(parent);\n        seen.set(parent, {column: col, index: col.length - 1});\n      }\n\n      parentKey = parent.parentKey;\n    }\n\n    columns.push(col);\n    column.index = columns.length - 1;\n  }\n\n  let maxLength = Math.max(...columns.map(c => c.length));\n  let headerRows = Array(maxLength).fill(0).map(() => []);\n\n  // Convert columns into rows.\n  let colIndex = 0;\n  for (let column of columns) {\n    let i = maxLength - 1;\n    for (let item of column) {\n      if (item) {\n        // Fill the space up until the current column with a placeholder\n        let row = headerRows[i];\n        let rowLength = row.reduce((p, c) => p + c.colspan, 0);\n        if (rowLength < colIndex) {\n          let placeholder: GridNode<T> = {\n            type: 'placeholder',\n            key: 'placeholder-' + item.key,\n            colspan: colIndex - rowLength,\n            index: rowLength,\n            value: null,\n            rendered: null,\n            level: i,\n            hasChildNodes: false,\n            childNodes: [],\n            textValue: null\n          };\n\n          // eslint-disable-next-line max-depth\n          if (row.length > 0) {\n            row[row.length - 1].nextKey = placeholder.key;\n            placeholder.prevKey = row[row.length - 1].key;\n          }\n\n          row.push(placeholder);\n        }\n\n        if (row.length > 0) {\n          row[row.length - 1].nextKey = item.key;\n          item.prevKey = row[row.length - 1].key;\n        }\n\n        item.level = i;\n        item.colIndex = colIndex;\n        row.push(item);\n      }\n\n      i--;\n    }\n\n    colIndex++;\n  }\n\n  // Add placeholders at the end of each row that is shorter than the maximum\n  let i = 0;\n  for (let row of headerRows) {\n    let rowLength = row.reduce((p, c) => p + c.colspan, 0);\n    if (rowLength < columnNodes.length) {\n      let placeholder: GridNode<T> = {\n        type: 'placeholder',\n        key: 'placeholder-' + row[row.length - 1].key,\n        colspan: columnNodes.length - rowLength,\n        index: rowLength,\n        value: null,\n        rendered: null,\n        level: i,\n        hasChildNodes: false,\n        childNodes: [],\n        textValue: null,\n        prevKey: row[row.length - 1].key\n      };\n\n      row.push(placeholder);\n    }\n\n    i++;\n  }\n\n  return headerRows.map((childNodes, index) => {\n    let row: GridNode<T> = {\n      type: 'headerrow',\n      key: 'headerrow-' + index,\n      index,\n      value: null,\n      rendered: null,\n      level: 0,\n      hasChildNodes: true,\n      childNodes,\n      textValue: null\n    };\n\n    return row;\n  });\n}\n\nexport class TableCollection<T> extends GridCollection<T> implements ITableCollection<T> {\n  headerRows: GridNode<T>[];\n  columns: GridNode<T>[];\n  rowHeaderColumnKeys: Set<Key>;\n  body: GridNode<T>;\n  _size: number = 0;\n\n  constructor(nodes: Iterable<GridNode<T>>, prev?: ITableCollection<T>, opts?: GridCollectionOptions) {\n    let rowHeaderColumnKeys: Set<Key> = new Set();\n    let body: GridNode<T>;\n    let columns: GridNode<T>[] = [];\n    // Add cell for selection checkboxes if needed.\n    if (opts?.showSelectionCheckboxes) {\n      let rowHeaderColumn: GridNode<T> = {\n        type: 'column',\n        key: ROW_HEADER_COLUMN_KEY,\n        value: null,\n        textValue: '',\n        level: 0,\n        index: opts?.showDragButtons ? 1 : 0,\n        hasChildNodes: false,\n        rendered: null,\n        childNodes: [],\n        props: {\n          isSelectionCell: true\n        }\n      };\n\n      columns.unshift(rowHeaderColumn);\n    }\n\n    // Add cell for drag buttons if needed.\n    if (opts?.showDragButtons) {\n      let rowHeaderColumn: GridNode<T> = {\n        type: 'column',\n        key: ROW_HEADER_COLUMN_KEY_DRAG,\n        value: null,\n        textValue: '',\n        level: 0,\n        index: 0,\n        hasChildNodes: false,\n        rendered: null,\n        childNodes: [],\n        props: {\n          isDragButtonCell: true\n        }\n      };\n\n      columns.unshift(rowHeaderColumn);\n    }\n\n    let rows = [];\n    let columnKeyMap = new Map();\n    let visit = (node: GridNode<T>) => {\n      switch (node.type) {\n        case 'body':\n          body = node;\n          break;\n        case 'column':\n          columnKeyMap.set(node.key, node);\n          if (!node.hasChildNodes) {\n            columns.push(node);\n\n            if (node.props.isRowHeader) {\n              rowHeaderColumnKeys.add(node.key);\n            }\n          }\n          break;\n        case 'item':\n          rows.push(node);\n          return; // do not go into childNodes\n      }\n      for (let child of node.childNodes) {\n        visit(child);\n      }\n    };\n\n    for (let node of nodes) {\n      visit(node);\n    }\n\n    let headerRows = buildHeaderRows(columnKeyMap, columns) as GridNode<T>[];\n    headerRows.forEach((row, i) => rows.splice(i, 0, row));\n\n    super({\n      columnCount: columns.length,\n      items: rows,\n      visitNode: node => {\n        node.column = columns[node.index];\n        return node;\n      }\n    });\n    this.columns = columns;\n    this.rowHeaderColumnKeys = rowHeaderColumnKeys;\n    this.body = body;\n    this.headerRows = headerRows;\n    this._size = [...body.childNodes].length;\n\n    // Default row header column to the first one.\n    if (this.rowHeaderColumnKeys.size === 0) {\n      this.rowHeaderColumnKeys.add(this.columns.find(column => !column.props?.isDragButtonCell && !column.props?.isSelectionCell).key);\n    }\n  }\n\n  *[Symbol.iterator]() {\n    yield* this.body.childNodes;\n  }\n\n  get size() {\n    return this._size;\n  }\n\n  getKeys() {\n    return this.keyMap.keys();\n  }\n\n  getKeyBefore(key: Key) {\n    let node = this.keyMap.get(key);\n    return node ? node.prevKey : null;\n  }\n\n  getKeyAfter(key: Key) {\n    let node = this.keyMap.get(key);\n    return node ? node.nextKey : null;\n  }\n\n  getFirstKey() {\n    return getFirstItem(this.body.childNodes)?.key;\n  }\n\n  getLastKey() {\n    return getLastItem(this.body.childNodes)?.key;\n  }\n\n  getItem(key: Key) {\n    return this.keyMap.get(key);\n  }\n\n  at(idx: number) {\n    const keys = [...this.getKeys()];\n    return this.getItem(keys[idx]);\n  }\n\n  getTextValue(key: Key): string {\n    let row = this.getItem(key);\n    if (!row) {\n      return '';\n    }\n\n    // If the row has a textValue, use that.\n    if (row.textValue) {\n      return row.textValue;\n    }\n\n    // Otherwise combine the text of each of the row header columns.\n    let rowHeaderColumnKeys = this.rowHeaderColumnKeys;\n    if (rowHeaderColumnKeys) {\n      let text = [];\n      for (let cell of row.childNodes) {\n        let column = this.columns[cell.index];\n        if (rowHeaderColumnKeys.has(column.key) && cell.textValue) {\n          text.push(cell.textValue);\n        }\n\n        if (text.length === rowHeaderColumnKeys.size) {\n          break;\n        }\n      }\n\n      return text.join(' ');\n    }\n\n    return '';\n  }\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CollectionBuilderContext} from './useTableState';\nimport {PartialNode} from '@react-stately/collections';\nimport React, {JSX, ReactElement} from 'react';\nimport {TableHeaderProps} from '@react-types/table';\n\nfunction TableHeader<T>(props: TableHeaderProps<T>): ReactElement { // eslint-disable-line @typescript-eslint/no-unused-vars\n  return null;\n}\n\nTableHeader.getCollectionNode = function* getCollectionNode<T>(props: TableHeaderProps<T>, context: CollectionBuilderContext<T>): Generator<PartialNode<T>, void, any> {\n  let {children, columns} = props;\n\n  // Clear columns so they aren't double added in strict mode.\n  context.columns = [];\n\n  if (typeof children === 'function') {\n    if (!columns) {\n      throw new Error('props.children was a function but props.columns is missing');\n    }\n\n    for (let column of columns) {\n      yield {\n        type: 'column',\n        value: column,\n        renderer: children\n      };\n    }\n  } else {\n    let columns: PartialNode<T>[] = [];\n    React.Children.forEach(children, column => {\n      columns.push({\n        type: 'column',\n        element: column\n      });\n    });\n\n    yield* columns;\n  }\n};\n\n/**\n * A TableHeader is a container for the Column elements in a Table. Columns can be statically defined\n * as children, or generated dynamically using a function based on the data passed to the `columns` prop.\n */\n// We don't want getCollectionNode to show up in the type definition\nlet _TableHeader = TableHeader as <T>(props: TableHeaderProps<T>) => JSX.Element;\nexport {_TableHeader as TableHeader};\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {PartialNode} from '@react-stately/collections';\nimport React, {JSX, ReactElement} from 'react';\nimport {TableBodyProps} from '@react-types/table';\n\nfunction TableBody<T>(props: TableBodyProps<T>): ReactElement { // eslint-disable-line @typescript-eslint/no-unused-vars\n  return null;\n}\n\nTableBody.getCollectionNode = function* getCollectionNode<T>(props: TableBodyProps<T>): Generator<PartialNode<T>> {\n  let {children, items} = props;\n  yield {\n    type: 'body',\n    hasChildNodes: true,\n    props,\n    *childNodes() {\n      if (typeof children === 'function') {\n        if (!items) {\n          throw new Error('props.children was a function but props.items is missing');\n        }\n\n        for (let item of items) {\n          yield {\n            type: 'item',\n            value: item,\n            renderer: children\n          };\n        }\n      } else {\n        let items: PartialNode<T>[] = [];\n        React.Children.forEach(children, item => {\n          items.push({\n            type: 'item',\n            element: item\n          });\n        });\n\n        yield* items;\n      }\n    }\n  };\n};\n\n/**\n * A TableBody is a container for the Row elements of a Table. Rows can be statically defined\n * as children, or generated dynamically using a function based on the data passed to the `items` prop.\n */\n// We don't want getCollectionNode to show up in the type definition\nlet _TableBody = TableBody as <T>(props: TableBodyProps<T>) => JSX.Element;\nexport {_TableBody as TableBody};\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CollectionBuilderContext} from './useTableState';\nimport {ColumnProps} from '@react-types/table';\nimport {GridNode} from '@react-types/grid';\nimport {PartialNode} from '@react-stately/collections';\nimport React, {JSX, ReactElement} from 'react';\n\nfunction Column<T>(props: ColumnProps<T>): ReactElement { // eslint-disable-line @typescript-eslint/no-unused-vars\n  return null;\n}\n\nColumn.getCollectionNode = function* getCollectionNode<T>(props: ColumnProps<T>, context: CollectionBuilderContext<T>): Generator<PartialNode<T>, void, GridNode<T>[]> {\n  let {title, children, childColumns} = props;\n\n  let rendered = title || children;\n  let textValue = props.textValue || (typeof rendered === 'string' ? rendered : '') || props['aria-label'];\n\n  let fullNodes = yield {\n    type: 'column',\n    hasChildNodes: !!childColumns || (title && React.Children.count(children) > 0),\n    rendered,\n    textValue,\n    props,\n    *childNodes() {\n      if (childColumns) {\n        for (let child of childColumns) {\n          yield {\n            type: 'column',\n            value: child\n          };\n        }\n      } else if (title) {\n        let childColumns: PartialNode<T>[] = [];\n        React.Children.forEach(children, child => {\n          childColumns.push({\n            type: 'column',\n            element: child as ReactElement<ColumnProps<T>>\n          });\n        });\n\n        yield* childColumns;\n      }\n    },\n    shouldInvalidate(newContext: CollectionBuilderContext<T>) {\n      // This is a bit of a hack, but it works.\n      // If this method is called, then there's a cached version of this node available.\n      // But, we need to keep the list of columns in the new context up to date.\n      updateContext(newContext);\n      return false;\n    }\n  };\n\n  let updateContext = (context: CollectionBuilderContext<T>) => {\n    // register leaf columns on the context so that <Row> can access them\n    for (let node of fullNodes) {\n      if (!node.hasChildNodes) {\n        context.columns.push(node);\n      }\n    }\n  };\n\n  updateContext(context);\n};\n\n/**\n * A Column represents a field of each item within a Table. Columns may also contain nested\n * Column elements to represent column groups. Nested columns can be statically defined as\n * children, or dynamically generated using a function based on the `childColumns` prop.\n */\n// We don't want getCollectionNode to show up in the type definition\nlet _Column = Column as <T>(props: ColumnProps<T>) => JSX.Element;\nexport {_Column as Column};\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CollectionBuilderContext} from './useTableState';\nimport {PartialNode} from '@react-stately/collections';\nimport React, {JSX, ReactElement} from 'react';\nimport {RowProps} from '@react-types/table';\n\nfunction Row<T>(props: RowProps<T>): ReactElement { // eslint-disable-line @typescript-eslint/no-unused-vars\n  return null;\n}\n\nRow.getCollectionNode = function* getCollectionNode<T>(props: RowProps<T>, context: CollectionBuilderContext<T>): Generator<PartialNode<T>> {\n  let {children, textValue, UNSTABLE_childItems} = props;\n\n  yield {\n    type: 'item',\n    props: props,\n    textValue,\n    'aria-label': props['aria-label'],\n    hasChildNodes: true,\n    *childNodes() {\n      // Process cells first\n      if (context.showDragButtons) {\n        yield {\n          type: 'cell',\n          key: 'header-drag', // this is combined with the row key by CollectionBuilder\n          props: {\n            isDragButtonCell: true\n          }\n        };\n      }\n\n      if (context.showSelectionCheckboxes && context.selectionMode !== 'none') {\n        yield {\n          type: 'cell',\n          key: 'header', // this is combined with the row key by CollectionBuilder\n          props: {\n            isSelectionCell: true\n          }\n        };\n      }\n\n      if (typeof children === 'function') {\n        for (let column of context.columns) {\n          yield {\n            type: 'cell',\n            element: children(column.key),\n            key: column.key // this is combined with the row key by CollectionBuilder\n          };\n        }\n\n        if (UNSTABLE_childItems) {\n          for (let child of UNSTABLE_childItems) {\n            // Note: in order to reuse the render function of TableBody for our child rows, we just need to yield a type and a value here. CollectionBuilder will then look up\n            // the parent renderer and use that to build the full node of this child row, using the value provided here to generate the cells\n            yield {\n              type: 'item',\n              value: child\n            };\n          }\n        }\n      } else {\n        let cells: PartialNode<T>[] = [];\n        let childRows: PartialNode<T>[] = [];\n        React.Children.forEach(children, node => {\n          if (node.type === Row) {\n            if (cells.length < context.columns.length) {\n              throw new Error('All of a Row\\'s child Cells must be positioned before any child Rows.');\n            }\n\n            childRows.push({\n              type: 'item',\n              element: node\n            });\n          } else {\n            cells.push({\n              type: 'cell',\n              element: node\n            });\n          }\n        });\n\n        if (cells.length !== context.columns.length) {\n          throw new Error(`Cell count must match column count. Found ${cells.length} cells and ${context.columns.length} columns.`);\n        }\n\n        yield* cells;\n        yield* childRows;\n      }\n    },\n    shouldInvalidate(newContext: CollectionBuilderContext<T>) {\n      // Invalidate all rows if the columns changed.\n      return newContext.columns.length !== context.columns.length ||\n        newContext.columns.some((c, i) => c.key !== context.columns[i].key) ||\n        newContext.showSelectionCheckboxes !== context.showSelectionCheckboxes ||\n        newContext.showDragButtons !== context.showDragButtons ||\n        newContext.selectionMode !== context.selectionMode;\n    }\n  };\n};\n\n/**\n * A Row represents a single item in a Table and contains Cell elements for each column.\n * Cells can be statically defined as children, or generated dynamically using a function\n * based on the columns defined in the TableHeader.\n */\n// We don't want getCollectionNode to show up in the type definition\nlet _Row = Row as <T>(props: RowProps<T>) => JSX.Element;\nexport {_Row as Row};\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CellProps} from '@react-types/table';\nimport {JSX, ReactElement} from 'react';\nimport {PartialNode} from '@react-stately/collections';\n\nfunction Cell(props: CellProps): ReactElement { // eslint-disable-line @typescript-eslint/no-unused-vars\n  return null;\n}\n\nCell.getCollectionNode = function* getCollectionNode<T>(props: CellProps): Generator<PartialNode<T>> {\n  let {children} = props;\n\n  let textValue = props.textValue || (typeof children === 'string' ? children : '') || props['aria-label'] || '';\n  yield {\n    type: 'cell',\n    props: props,\n    rendered: children,\n    textValue,\n    'aria-label': props['aria-label'],\n    hasChildNodes: false\n  };\n};\n\n/**\n * A Cell represents the value of a single Column within a Table Row.\n */\n// We don't want getCollectionNode to show up in the type definition\nlet _Cell = Cell as (props: CellProps) => JSX.Element;\nexport {_Cell as Cell};\n","/*\n * Copyright 2023 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CollectionBuilder} from '@react-stately/collections';\nimport {GridNode} from '@react-types/grid';\nimport {Key} from '@react-types/shared';\nimport {ReactElement, useMemo} from 'react';\nimport {TableCollection} from './TableCollection';\nimport {tableNestedRows} from '@react-stately/flags';\nimport {TableState, TableStateProps, useTableState} from './useTableState';\nimport {useControlledState} from '@react-stately/utils';\n\nexport interface TreeGridState<T> extends TableState<T> {\n  /** A set of keys for items that are expanded. */\n  expandedKeys: 'all' | Set<Key>,\n  /** Toggles the expanded state for a row by its key. */\n  toggleKey(key: Key): void,\n  /** The key map containing nodes representing the collection's tree grid structure. */\n  keyMap: Map<Key, GridNode<T>>,\n  /** The number of leaf columns provided by the user. */\n  userColumnCount: number\n}\n\nexport interface TreeGridStateProps<T> extends Omit<TableStateProps<T>, 'collection'> {\n  /** The currently expanded keys in the collection (controlled). */\n  UNSTABLE_expandedKeys?: 'all' | Iterable<Key>,\n  /** The initial expanded keys in the collection (uncontrolled). */\n  UNSTABLE_defaultExpandedKeys?: 'all' | Iterable<Key>,\n  /** Handler that is called when items are expanded or collapsed. */\n  UNSTABLE_onExpandedChange?: (keys: Set<Key>) => any\n}\n\n/**\n * Provides state management for a tree grid component. Handles building a collection\n * of columns and rows from props. In addition, it tracks and manages expanded rows, row selection, and sort order changes.\n */\nexport function UNSTABLE_useTreeGridState<T extends object>(props: TreeGridStateProps<T>): TreeGridState<T> {\n  let {\n    selectionMode = 'none',\n    showSelectionCheckboxes,\n    showDragButtons,\n    UNSTABLE_expandedKeys: propExpandedKeys,\n    UNSTABLE_defaultExpandedKeys: propDefaultExpandedKeys,\n    UNSTABLE_onExpandedChange,\n    children\n  } = props;\n\n  if (!tableNestedRows()) {\n    throw new Error('Feature flag for table nested rows must be enabled to use useTreeGridState.');\n  }\n\n  let [expandedKeys, setExpandedKeys] = useControlledState(\n    propExpandedKeys ? convertExpanded(propExpandedKeys) : undefined,\n    propDefaultExpandedKeys ? convertExpanded(propDefaultExpandedKeys) : new Set(),\n    UNSTABLE_onExpandedChange\n  );\n\n  let context = useMemo(() => ({\n    showSelectionCheckboxes: showSelectionCheckboxes && selectionMode !== 'none',\n    showDragButtons: showDragButtons,\n    selectionMode,\n    columns: []\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }), [children, showSelectionCheckboxes, selectionMode, showDragButtons]);\n\n  let builder = useMemo(() => new CollectionBuilder<T>(), []);\n  let nodes = useMemo(() => builder.build({children: children as ReactElement[]}, context), [builder, children, context]);\n  let treeGridCollection = useMemo(() => {\n    return generateTreeGridCollection<T>(nodes, {showSelectionCheckboxes, showDragButtons, expandedKeys});\n  }, [nodes, showSelectionCheckboxes, showDragButtons, expandedKeys]);\n\n  let onToggle = (key: Key) => {\n    setExpandedKeys(toggleKey(expandedKeys, key, treeGridCollection));\n  };\n\n  let collection = useMemo(() => {\n    return new TableCollection(treeGridCollection.tableNodes, null, context);\n  }, [context, treeGridCollection.tableNodes]);\n\n  let tableState = useTableState({...props, collection});\n  return {\n    ...tableState,\n    keyMap: treeGridCollection.keyMap,\n    userColumnCount: treeGridCollection.userColumnCount,\n    expandedKeys,\n    toggleKey: onToggle\n  };\n}\n\nfunction toggleKey<T>(currentExpandedKeys: 'all' | Set<Key>, key: Key, collection: TreeGridCollection<T>): Set<Key> {\n  let updatedExpandedKeys: Set<Key>;\n  if (currentExpandedKeys === 'all') {\n    updatedExpandedKeys = new Set(collection.flattenedRows.filter(row => row.props.UNSTABLE_childItems || row.props.children.length > collection.userColumnCount).map(row => row.key));\n    updatedExpandedKeys.delete(key);\n  } else {\n    updatedExpandedKeys = new Set(currentExpandedKeys);\n    if (updatedExpandedKeys.has(key)) {\n      updatedExpandedKeys.delete(key);\n    } else {\n      updatedExpandedKeys.add(key);\n    }\n  }\n\n  return updatedExpandedKeys;\n}\n\nfunction convertExpanded(expanded: 'all' | Iterable<Key>): 'all' | Set<Key> {\n  if (!expanded) {\n    return new Set<Key>();\n  }\n\n  return expanded === 'all'\n    ? 'all'\n    : new Set(expanded);\n}\n\ninterface TreeGridCollectionOptions {\n  showSelectionCheckboxes?: boolean,\n  showDragButtons?: boolean,\n  expandedKeys: 'all' | Set<Key>\n}\n\ninterface TreeGridCollection<T> {\n  keyMap: Map<Key, GridNode<T>>,\n  tableNodes: GridNode<T>[],\n  flattenedRows: GridNode<T>[],\n  userColumnCount: number\n}\nfunction generateTreeGridCollection<T>(nodes, opts: TreeGridCollectionOptions): TreeGridCollection<T> {\n  let {\n    expandedKeys = new Set()\n  } = opts;\n\n  let body: GridNode<T>;\n  let flattenedRows = [];\n  let columnCount = 0;\n  let userColumnCount = 0;\n  let originalColumns = [];\n  let keyMap = new Map();\n\n  if (opts?.showSelectionCheckboxes) {\n    columnCount++;\n  }\n\n  if (opts?.showDragButtons) {\n    columnCount++;\n  }\n\n  let topLevelRows = [];\n  let visit = (node: GridNode<T>) => {\n    switch (node.type) {\n      case 'body':\n        body = node;\n        keyMap.set(body.key, body);\n        break;\n      case 'column':\n        if (!node.hasChildNodes) {\n          userColumnCount++;\n        }\n        break;\n      case 'item':\n        topLevelRows.push(node);\n        return;\n    }\n\n    for (let child of node.childNodes) {\n      visit(child);\n    }\n  };\n\n  for (let node of nodes) {\n    if (node.type === 'column') {\n      originalColumns.push(node);\n    }\n    visit(node);\n  }\n  columnCount += userColumnCount;\n\n  // Update each grid node in the treegrid table with values specific to a treegrid structure. Also store a set of flattened row nodes for TableCollection to consume\n  let globalRowCount = 0;\n  let visitNode = (node: GridNode<T>, i?: number) => {\n    // Clone row node and its children so modifications to the node for treegrid specific values aren't applied on the nodes provided\n    // to TableCollection. Index, level, and parent keys are all changed to reflect a flattened row structure rather than the treegrid structure\n    // values automatically calculated via CollectionBuilder\n    if (node.type === 'item') {\n      let childNodes = [];\n      for (let child of node.childNodes) {\n        if (child.type === 'cell') {\n          let cellClone = {...child};\n          if (cellClone.index + 1 === columnCount) {\n            cellClone.nextKey = null;\n          }\n          childNodes.push({...cellClone});\n        }\n      }\n      let clone = {...node, childNodes: childNodes, parentKey: body.key, level: 1, index: globalRowCount++};\n      flattenedRows.push(clone);\n    }\n\n    let newProps = {};\n\n    // Assign indexOfType to cells and rows for aria-posinset\n    if (node.type !== 'placeholder' && node.type !== 'column') {\n      newProps['indexOfType'] = i;\n    }\n\n    // Use Object.assign instead of spread to preserve object reference for keyMap. Also ensures retrieving nodes\n    // via .childNodes returns the same object as the one found via keyMap look up\n    Object.assign(node, newProps);\n    keyMap.set(node.key, node);\n\n    let lastNode: GridNode<T>;\n    let rowIndex = 0;\n    for (let child of node.childNodes) {\n      if (!(child.type === 'item' && expandedKeys !== 'all' && !expandedKeys.has(node.key))) {\n        if (child.parentKey == null) {\n          // if child is a cell/expanded row/column and the parent key isn't already established by the collection, match child node to parent row\n          child.parentKey = node.key;\n        }\n\n        if (lastNode) {\n          lastNode.nextKey = child.key;\n          child.prevKey = lastNode.key;\n        } else {\n          child.prevKey = null;\n        }\n\n        if (child.type === 'item') {\n          visitNode(child, rowIndex++);\n        } else {\n          // We enforce that the cells come before rows so can just reuse cell index\n          visitNode(child, child.index);\n        }\n\n        lastNode = child;\n      }\n    }\n\n    if (lastNode) {\n      lastNode.nextKey = null;\n    }\n  };\n\n  let last: GridNode<T>;\n  topLevelRows.forEach((node: GridNode<T>, i) => {\n    visitNode(node as GridNode<T>, i);\n\n    if (last) {\n      last.nextKey = node.key;\n      node.prevKey = last.key;\n    } else {\n      node.prevKey = null;\n    }\n\n    last = node;\n  });\n\n  if (last) {\n    last.nextKey = null;\n  }\n\n  return {\n    keyMap,\n    userColumnCount,\n    flattenedRows,\n    tableNodes: [...originalColumns, {...body, childNodes: flattenedRows}]\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}