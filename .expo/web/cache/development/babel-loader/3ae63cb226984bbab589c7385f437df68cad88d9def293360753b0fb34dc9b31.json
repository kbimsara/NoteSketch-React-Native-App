{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"isDisabled\", \"onPress\", \"onPressStart\", \"onPressEnd\", \"onPressUp\", \"onPressChange\", \"isPressed\"];\nimport React from 'react';\nimport { mergeProps } from '@react-aria/utils';\nexport function usePress(_ref) {\n  var isDisabled = _ref.isDisabled,\n    _onPress = _ref.onPress,\n    onPressStart = _ref.onPressStart,\n    onPressEnd = _ref.onPressEnd,\n    onPressUp = _ref.onPressUp,\n    onPressChange = _ref.onPressChange,\n    isPressedProp = _ref.isPressed,\n    restProps = _objectWithoutProperties(_ref, _excluded);\n  var _React$useState = React.useState(false),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    isPressed = _React$useState2[0],\n    setPressed = _React$useState2[1];\n  var pressProps = {\n    onPress: function onPress(e) {\n      if (isDisabled) return;\n      _onPress && _onPress(e);\n    },\n    onPressIn: function onPressIn(e) {\n      if (isDisabled) return;\n      onPressStart && onPressStart(e);\n      setPressed(true);\n      onPressChange && onPressChange(true);\n    },\n    onPressOut: function onPressOut(e) {\n      if (isDisabled) return;\n      onPressEnd && onPressEnd(e);\n      setPressed(false);\n      onPressChange && onPressChange(false);\n      onPressUp && onPressUp(e);\n    }\n  };\n  pressProps = mergeProps(pressProps, restProps);\n  return {\n    isPressed: isPressedProp || isPressed,\n    pressProps: pressProps\n  };\n}","map":{"version":3,"names":["React","mergeProps","usePress","_ref","isDisabled","onPress","onPressStart","onPressEnd","onPressUp","onPressChange","isPressedProp","isPressed","restProps","_objectWithoutProperties","_excluded","_React$useState","useState","_React$useState2","_slicedToArray","setPressed","pressProps","e","onPressIn","onPressOut"],"sources":["D:\\React Native\\Expo+glustack\\NoteSketch\\node_modules\\@react-native-aria\\interactions\\src\\usePress.ts"],"sourcesContent":["import React, { RefObject } from 'react';\nimport { mergeProps } from '@react-aria/utils';\n\nexport interface PressEvents {\n  /** Handler that is called when the press is released over the target. */\n  onPress?: (e: any) => void;\n  /** Handler that is called when a press interaction starts. */\n  onPressStart?: (e: any) => void;\n  /**\n   * Handler that is called when a press interaction ends, either\n   * over the target or when the pointer leaves the target.\n   */\n  onPressEnd?: (e: any) => void;\n  /** Handler that is called when the press state changes. */\n  onPressChange?: (isPressed: boolean) => void;\n  /**\n   * Handler that is called when a press is released over the target, regardless of\n   * whether it started on the target or not.\n   */\n  onPressUp?: (e: any) => void;\n}\n\nexport interface PressProps extends PressEvents {\n  /** Whether the target is in a controlled press state (e.g. an overlay it triggers is open). */\n  isPressed?: boolean;\n  /** Whether the press events should be disabled. */\n  isDisabled?: boolean;\n  /** Whether the target should not receive focus on press. */\n  preventFocusOnPress?: boolean;\n}\n\nexport interface PressHookProps extends PressProps {\n  /** A ref to the target element. */\n  ref?: RefObject<any>;\n}\n\nexport type PressResult = {\n  /** Whether the target is currently pressed. */\n  isPressed: boolean;\n  /** Props to spread on the target element. */\n  pressProps: any;\n};\n\nexport function usePress({\n  isDisabled,\n  onPress,\n  onPressStart,\n  onPressEnd,\n  onPressUp, // No onPressUp on RN.\n  onPressChange,\n  isPressed: isPressedProp,\n  ...restProps\n}: PressHookProps): PressResult {\n  let [isPressed, setPressed] = React.useState(false);\n\n  let pressProps = {\n    onPress: (e: any) => {\n      if (isDisabled) return;\n      onPress && onPress(e);\n    },\n    onPressIn: (e: any) => {\n      if (isDisabled) return;\n      onPressStart && onPressStart(e);\n      setPressed(true);\n      onPressChange && onPressChange(true);\n    },\n    onPressOut: (e: any) => {\n      if (isDisabled) return;\n      onPressEnd && onPressEnd(e);\n      setPressed(false);\n      onPressChange && onPressChange(false);\n      onPressUp && onPressUp(e);\n    },\n  };\n\n  pressProps = mergeProps(pressProps, restProps);\n\n  return {\n    isPressed: isPressedProp || isPressed,\n    pressProps,\n  };\n}\n"],"mappings":";;;AAAA,OAAOA,KAAK,MAAqB,OAAO;AACxC,SAASC,UAAU,QAAQ,mBAAmB;AA0C9C,OAAO,SAASC,QAAQA,CAAAC,IAAA,EASQ;EAAA,IAR9BC,UAAU,GAAAD,IAAA,CAAVC,UAAU;IACVC,QAAO,GAAAF,IAAA,CAAPE,OAAO;IACPC,YAAY,GAAAH,IAAA,CAAZG,YAAY;IACZC,UAAU,GAAAJ,IAAA,CAAVI,UAAU;IACVC,SAAS,GAAAL,IAAA,CAATK,SAAS;IACTC,aAAa,GAAAN,IAAA,CAAbM,aAAa;IACFC,aAAa,GAAAP,IAAA,CAAxBQ,SAAS;IACNC,SAAA,GAAAC,wBAAA,CAAAV,IAAA,EAAAW,SAAA;EAEH,IAAAC,eAAA,GAA8Bf,KAAK,CAACgB,QAAQ,CAAC,KAAK,CAAC;IAAAC,gBAAA,GAAAC,cAAA,CAAAH,eAAA;IAA9CJ,SAAS,GAAAM,gBAAA;IAAEE,UAAU,GAAAF,gBAAA;EAE1B,IAAIG,UAAU,GAAG;IACff,OAAO,EAAG,SAAAA,QAAAgB,CAAM,EAAK;MACnB,IAAIjB,UAAU,EAAE;MAChBC,QAAO,IAAIA,QAAO,CAACgB,CAAC,CAAC;IACvB,CAAC;IACDC,SAAS,EAAG,SAAAA,UAAAD,CAAM,EAAK;MACrB,IAAIjB,UAAU,EAAE;MAChBE,YAAY,IAAIA,YAAY,CAACe,CAAC,CAAC;MAC/BF,UAAU,CAAC,IAAI,CAAC;MAChBV,aAAa,IAAIA,aAAa,CAAC,IAAI,CAAC;IACtC,CAAC;IACDc,UAAU,EAAG,SAAAA,WAAAF,CAAM,EAAK;MACtB,IAAIjB,UAAU,EAAE;MAChBG,UAAU,IAAIA,UAAU,CAACc,CAAC,CAAC;MAC3BF,UAAU,CAAC,KAAK,CAAC;MACjBV,aAAa,IAAIA,aAAa,CAAC,KAAK,CAAC;MACrCD,SAAS,IAAIA,SAAS,CAACa,CAAC,CAAC;IAC3B;EACF,CAAC;EAEDD,UAAU,GAAGnB,UAAU,CAACmB,UAAU,EAAER,SAAS,CAAC;EAE9C,OAAO;IACLD,SAAS,EAAED,aAAa,IAAIC,SAAS;IACrCS,UAAA,EAAAA;EACF,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}