{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nexport var useAccordion = function useAccordion(props) {\n  var type = props.type,\n    isCollapsible = props.isCollapsible,\n    selectedValues = props.selectedValues,\n    setSelectedValues = props.setSelectedValues;\n  var toggleItem = function toggleItem(itemValue) {\n    var isDisabled = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    if (isDisabled || !itemValue) return;\n    if (type === 'single') {\n      if (isCollapsible) {\n        if (selectedValues.includes(itemValue)) {\n          setSelectedValues([]);\n        } else {\n          setSelectedValues([itemValue]);\n        }\n      } else {\n        if (selectedValues.includes(itemValue)) return;\n        setSelectedValues([itemValue]);\n      }\n    } else {\n      if (isCollapsible) {\n        if (selectedValues.includes(itemValue)) {\n          setSelectedValues(selectedValues.filter(function (v) {\n            return v !== itemValue;\n          }));\n        } else {\n          setSelectedValues([].concat(_toConsumableArray(selectedValues), [itemValue]));\n        }\n      } else {\n        if (selectedValues.includes(itemValue)) return;\n        setSelectedValues([].concat(_toConsumableArray(selectedValues), [itemValue]));\n      }\n    }\n  };\n  return {\n    state: {\n      selectedValues: selectedValues,\n      toggleItem: toggleItem\n    }\n  };\n};","map":{"version":3,"names":["useAccordion","props","type","isCollapsible","selectedValues","setSelectedValues","toggleItem","itemValue","isDisabled","arguments","length","undefined","includes","filter","v","concat","_toConsumableArray","state"],"sources":["D:\\React Native\\Expo+glustack\\NoteSketch\\node_modules\\@react-native-aria\\accordion\\lib\\module\\useAccordion.ts"],"sourcesContent":["type Props = {\n  type: 'single' | 'multiple';\n  isCollapsible: boolean;\n  selectedValues: string[];\n  setSelectedValues: (values: string[]) => void;\n};\n\nexport const useAccordion = (props: Props) => {\n  const { type, isCollapsible, selectedValues, setSelectedValues } = props;\n\n  /*\n   * The toggleItem function is responsible for updating the selected values\n   * based on the type of accordion (single or multiple) and whether or not\n   * the accordion is collapsible.\n   */\n  const toggleItem = (itemValue: string, isDisabled = false) => {\n    if (isDisabled || !itemValue) return;\n\n    if (type === 'single') {\n      if (isCollapsible) {\n        if (selectedValues.includes(itemValue)) {\n          setSelectedValues([]);\n        } else {\n          setSelectedValues([itemValue]);\n        }\n      } else {\n        if (selectedValues.includes(itemValue)) return;\n        setSelectedValues([itemValue]);\n      }\n    } else {\n      if (isCollapsible) {\n        if (selectedValues.includes(itemValue)) {\n          setSelectedValues(selectedValues.filter((v) => v !== itemValue));\n        } else {\n          setSelectedValues([...selectedValues, itemValue]);\n        }\n      } else {\n        if (selectedValues.includes(itemValue)) return;\n        setSelectedValues([...selectedValues, itemValue]);\n      }\n    }\n  };\n\n  return {\n    state: {\n      selectedValues,\n      toggleItem,\n    },\n  };\n};\n"],"mappings":";AAOA,OAAO,IAAMA,YAAY,GAAI,SAAhBA,YAAYA,CAAIC,KAAD,EAAkB;EAC5C,IAAQC,IAAF,GAA6DD,KAAnE,CAAQC,IAAF;IAAQC,aAAR,GAA6DF,KAAnE,CAAcE,aAAR;IAAuBC,cAAvB,GAA6DH,KAAnE,CAA6BG,cAAvB;IAAuCC,iBAAA,GAAsBJ,KAAnE,CAA6CI,iBAAA;EAO7C,IAAMC,UAAU,GAAG,SAAbA,UAAUA,CAAIC,SAAD,EAA2C;IAAA,IAAvBC,UAAU,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,KAAjC;IACjB,IAAID,UAAU,IAAI,CAACD,SAAnB,EAA8B;IAE9B,IAAIL,IAAI,KAAK,QAAb,EAAuB;MACrB,IAAIC,aAAJ,EAAmB;QACjB,IAAIC,cAAc,CAACQ,QAAf,CAAwBL,SAAxB,CAAJ,EAAwC;UACtCF,iBAAiB,CAAC,EAAD,CAAjB;QACD,CAFD,MAEO;UACLA,iBAAiB,CAAC,CAACE,SAAD,CAAD,CAAjB;QACD;MACF,CAND,MAMO;QACL,IAAIH,cAAc,CAACQ,QAAf,CAAwBL,SAAxB,CAAJ,EAAwC;QACxCF,iBAAiB,CAAC,CAACE,SAAD,CAAD,CAAjB;MACD;IACF,CAXD,MAWO;MACL,IAAIJ,aAAJ,EAAmB;QACjB,IAAIC,cAAc,CAACQ,QAAf,CAAwBL,SAAxB,CAAJ,EAAwC;UACtCF,iBAAiB,CAACD,cAAc,CAACS,MAAf,CAAuB,UAAAC,CAAD;YAAA,OAAOA,CAAC,KAAKP,SAAnC;UAAA,EAAD,CAAjB;QACD,CAFD,MAEO;UACLF,iBAAiB,IAAAU,MAAA,CAAAC,kBAAA,CAAKZ,cAAJ,IAAoBG,SAApB,EAAD,CAAjB;QACD;MACF,CAND,MAMO;QACL,IAAIH,cAAc,CAACQ,QAAf,CAAwBL,SAAxB,CAAJ,EAAwC;QACxCF,iBAAiB,IAAAU,MAAA,CAAAC,kBAAA,CAAKZ,cAAJ,IAAoBG,SAApB,EAAD,CAAjB;MACD;IACF;EACF,CA1BD;EA4BA,OAAO;IACLU,KAAK,EAAE;MACLb,cADK,EACLA,cADK;MAELE,UAAA,EAAAA;IAFK;EADF,CAAP;AAMD,CA1CM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}