{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { clamp, focusWithoutScrolling, mergeProps, useGlobalListeners } from '@react-aria/utils';\nimport { getSliderThumbId, sliderIds } from './utils';\nimport { useCallback, useEffect, useRef } from 'react';\nimport { useFocusable } from '@react-aria/focus';\nimport { useLabel } from '@react-aria/label';\nimport { useMove } from './useMove';\nimport { isRTL } from '@react-native-aria/utils';\nexport function useSliderThumb(opts, state, isReversed) {\n  var _opts$ariaLabelledby;\n  var index = opts.index,\n    isRequired = opts.isRequired,\n    isDisabled = opts.isDisabled,\n    validationState = opts.validationState,\n    trackLayout = opts.trackLayout,\n    inputRef = opts.inputRef;\n  var isVertical = opts.orientation === 'vertical';\n  var direction = isRTL() ? 'rtl' : undefined;\n  var _useGlobalListeners = useGlobalListeners(),\n    addGlobalListener = _useGlobalListeners.addGlobalListener,\n    removeGlobalListener = _useGlobalListeners.removeGlobalListener;\n  var labelId = sliderIds.get(state);\n  var _useLabel = useLabel(_objectSpread(_objectSpread({}, opts), {}, {\n      'id': getSliderThumbId(state, index),\n      'aria-labelledby': `${labelId} ${(_opts$ariaLabelledby = opts['aria-labelledby']) != null ? _opts$ariaLabelledby : ''}`.trim()\n    })),\n    labelProps = _useLabel.labelProps,\n    fieldProps = _useLabel.fieldProps;\n  var value = state.values[index];\n  var focusInput = useCallback(function () {\n    if (inputRef.current) {\n      focusWithoutScrolling(inputRef.current);\n    }\n  }, [inputRef]);\n  var isFocused = state.focusedThumb === index;\n  useEffect(function () {\n    if (isFocused) {\n      focusInput();\n    }\n  }, [isFocused, focusInput]);\n  var stateRef = useRef(null);\n  stateRef.current = state;\n  var reverseX = isReversed || direction === 'rtl';\n  var currentPosition = useRef(null);\n  var _useMove = useMove({\n      onMoveStart: function onMoveStart() {\n        currentPosition.current = null;\n        state.setThumbDragging(index, true);\n      },\n      onMove: function onMove(_ref) {\n        var deltaX = _ref.deltaX,\n          deltaY = _ref.deltaY,\n          pointerType = _ref.pointerType;\n        var size = isVertical ? trackLayout.height : trackLayout.width;\n        if (currentPosition.current == null) {\n          currentPosition.current = stateRef.current.getThumbPercent(index) * size;\n        }\n        if (pointerType === 'keyboard') {\n          var delta = ((reverseX ? -deltaX : deltaX) + (reverseX ? deltaY : -deltaY)) * stateRef.current.step;\n          currentPosition.current += delta * size;\n          stateRef.current.setThumbValue(index, stateRef.current.getThumbValue(index) + delta);\n        } else {\n          var _delta = isVertical ? deltaY : deltaX;\n          if (reverseX) {\n            if (!isVertical) {\n              _delta = -_delta;\n            }\n          } else {\n            if (isVertical) {\n              _delta = -_delta;\n            }\n          }\n          currentPosition.current += _delta;\n          stateRef.current.setThumbPercent(index, clamp(currentPosition.current / size, 0, 1));\n        }\n      },\n      onMoveEnd: function onMoveEnd() {\n        state.setThumbDragging(index, false);\n      }\n    }),\n    moveProps = _useMove.moveProps;\n  state.setThumbEditable(index, !isDisabled);\n  var _useFocusable = useFocusable(mergeProps(opts, {\n      onFocus: function onFocus() {\n        return state.setFocusedThumb(index);\n      },\n      onBlur: function onBlur() {\n        return state.setFocusedThumb(undefined);\n      }\n    }), inputRef),\n    focusableProps = _useFocusable.focusableProps;\n  var currentPointer = useRef(undefined);\n  var onDown = function onDown(id) {\n    focusInput();\n    currentPointer.current = id;\n    state.setThumbDragging(index, true);\n    addGlobalListener(window, 'mouseup', onUp, false);\n    addGlobalListener(window, 'touchend', onUp, false);\n    addGlobalListener(window, 'pointerup', onUp, false);\n  };\n  var onUp = function onUp(e) {\n    var _e$pointerId;\n    var _e$changedTouches;\n    var id = (_e$pointerId = e.pointerId) != null ? _e$pointerId : (_e$changedTouches = e.changedTouches) === null || _e$changedTouches === void 0 ? void 0 : _e$changedTouches[0].identifier;\n    if (id === currentPointer.current) {\n      focusInput();\n      state.setThumbDragging(index, false);\n      removeGlobalListener(window, 'mouseup', onUp, false);\n      removeGlobalListener(window, 'touchend', onUp, false);\n      removeGlobalListener(window, 'pointerup', onUp, false);\n    }\n  };\n  return {\n    inputProps: mergeProps(focusableProps, fieldProps, {\n      'type': 'range',\n      'tabIndex': !isDisabled ? 0 : undefined,\n      'min': state.getThumbMinValue(index),\n      'max': state.getThumbMaxValue(index),\n      'step': state.step,\n      'value': value,\n      'disabled': isDisabled,\n      'aria-orientation': opts.orientation,\n      'aria-valuetext': state.getThumbValueLabel(index),\n      'aria-required': isRequired || undefined,\n      'aria-invalid': validationState === 'invalid' || undefined,\n      'aria-errormessage': opts['aria-errormessage'],\n      'onChange': function onChange(e) {\n        state.setThumbValue(index, parseFloat(e.target.value));\n      }\n    }),\n    thumbProps: !isDisabled ? mergeProps(moveProps, {\n      onMouseDown: function onMouseDown(e) {\n        if (e.button !== 0 || e.altKey || e.ctrlKey || e.metaKey) {\n          return;\n        }\n        onDown();\n      },\n      onPointerDown: function onPointerDown(e) {\n        if (e.button !== 0 || e.altKey || e.ctrlKey || e.metaKey) {\n          return;\n        }\n        onDown(e.pointerId);\n      },\n      onTouchStart: function onTouchStart(e) {\n        onDown(e.changedTouches[0].identifier);\n      }\n    }) : {},\n    labelProps: labelProps\n  };\n}","map":{"version":3,"names":["clamp","focusWithoutScrolling","mergeProps","useGlobalListeners","getSliderThumbId","sliderIds","useCallback","useEffect","useRef","useFocusable","useLabel","useMove","isRTL","useSliderThumb","opts","state","isReversed","_opts$ariaLabelledby","index","isRequired","isDisabled","validationState","trackLayout","inputRef","isVertical","orientation","direction","undefined","_useGlobalListeners","addGlobalListener","removeGlobalListener","labelId","get","_useLabel","_objectSpread","trim","labelProps","fieldProps","value","values","focusInput","current","isFocused","focusedThumb","stateRef","reverseX","currentPosition","_useMove","onMoveStart","setThumbDragging","onMove","_ref","deltaX","deltaY","pointerType","size","height","width","getThumbPercent","delta","step","setThumbValue","getThumbValue","setThumbPercent","onMoveEnd","moveProps","setThumbEditable","_useFocusable","onFocus","setFocusedThumb","onBlur","focusableProps","currentPointer","onDown","id","window","onUp","e","_e$pointerId","_e$changedTouches","pointerId","changedTouches","identifier","inputProps","getThumbMinValue","getThumbMaxValue","getThumbValueLabel","onChange","parseFloat","target","thumbProps","onMouseDown","button","altKey","ctrlKey","metaKey","onPointerDown","onTouchStart"],"sources":["D:\\React Native\\Expo+glustack\\NoteSketch\\node_modules\\@react-native-aria\\slider\\src\\useSliderThumb.web.ts"],"sourcesContent":["import { AriaSliderThumbProps } from '@react-types/slider';\nimport {\n  clamp,\n  focusWithoutScrolling,\n  mergeProps,\n  useGlobalListeners,\n} from '@react-aria/utils';\nimport { getSliderThumbId, sliderIds } from './utils';\nimport React, {\n  ChangeEvent,\n  HTMLAttributes,\n  InputHTMLAttributes,\n  LabelHTMLAttributes,\n  RefObject,\n  useCallback,\n  useEffect,\n  useRef,\n} from 'react';\nimport { SliderState } from '@react-stately/slider';\nimport { useFocusable } from '@react-aria/focus';\nimport { useLabel } from '@react-aria/label';\nimport { useMove } from './useMove';\nimport { isRTL } from '@react-native-aria/utils';\n\ninterface SliderThumbAria {\n  /** Props for the root thumb element; handles the dragging motion. */\n  thumbProps: HTMLAttributes<HTMLElement>;\n\n  /** Props for the visually hidden range input element. */\n  inputProps: InputHTMLAttributes<HTMLInputElement>;\n\n  /** Props for the label element for this thumb (optional). */\n  labelProps: LabelHTMLAttributes<HTMLLabelElement>;\n}\n\ninterface SliderThumbOptions extends AriaSliderThumbProps {\n  /** A ref to the track element. */\n  trackLayout: any;\n  /** A ref to the thumb input element. */\n  inputRef: RefObject<HTMLInputElement>;\n}\n\n/**\n * Provides behavior and accessibility for a thumb of a slider component.\n *\n * @param opts Options for this Slider thumb.\n * @param state Slider state, created via `useSliderState`.\n */\nexport function useSliderThumb(\n  opts: SliderThumbOptions,\n  state: SliderState,\n  isReversed?: boolean\n): SliderThumbAria {\n  let {\n    index,\n    isRequired,\n    isDisabled,\n    validationState,\n    trackLayout,\n    inputRef,\n  } = opts;\n\n  let isVertical = opts.orientation === 'vertical';\n\n  let direction = isRTL() ? 'rtl' : undefined;\n  let { addGlobalListener, removeGlobalListener } = useGlobalListeners();\n\n  let labelId = sliderIds.get(state);\n  const { labelProps, fieldProps } = useLabel({\n    ...opts,\n    'id': getSliderThumbId(state, index),\n    'aria-labelledby': `${labelId} ${opts['aria-labelledby'] ?? ''}`.trim(),\n  });\n\n  const value = state.values[index];\n\n  const focusInput = useCallback(() => {\n    if (inputRef.current) {\n      focusWithoutScrolling(inputRef.current);\n    }\n  }, [inputRef]);\n\n  const isFocused = state.focusedThumb === index;\n\n  useEffect(() => {\n    if (isFocused) {\n      focusInput();\n    }\n  }, [isFocused, focusInput]);\n\n  const stateRef = useRef<SliderState>(null);\n  stateRef.current = state;\n  let reverseX = isReversed || direction === 'rtl';\n  let currentPosition = useRef<number>(null);\n  let { moveProps } = useMove({\n    onMoveStart() {\n      currentPosition.current = null;\n      state.setThumbDragging(index, true);\n    },\n    onMove({ deltaX, deltaY, pointerType }) {\n      let size = isVertical ? trackLayout.height : trackLayout.width;\n\n      if (currentPosition.current == null) {\n        currentPosition.current =\n          stateRef.current.getThumbPercent(index) * size;\n      }\n      if (pointerType === 'keyboard') {\n        // (invert left/right according to language direction) + (according to vertical)\n        let delta =\n          ((reverseX ? -deltaX : deltaX) + (reverseX ? deltaY : -deltaY)) *\n          stateRef.current.step;\n        currentPosition.current += delta * size;\n        stateRef.current.setThumbValue(\n          index,\n          stateRef.current.getThumbValue(index) + delta\n        );\n      } else {\n        let delta = isVertical ? deltaY : deltaX;\n        if (reverseX) {\n          if (!isVertical) {\n            delta = -delta;\n          }\n        } else {\n          if (isVertical) {\n            delta = -delta;\n          }\n        }\n        currentPosition.current += delta;\n        stateRef.current.setThumbPercent(\n          index,\n          clamp(currentPosition.current / size, 0, 1)\n        );\n      }\n    },\n    onMoveEnd() {\n      state.setThumbDragging(index, false);\n    },\n  });\n\n  // Immediately register editability with the state\n  state.setThumbEditable(index, !isDisabled);\n\n  const { focusableProps } = useFocusable(\n    mergeProps(opts, {\n      onFocus: () => state.setFocusedThumb(index),\n      onBlur: () => state.setFocusedThumb(undefined),\n    }),\n    inputRef\n  );\n\n  let currentPointer = useRef<number | undefined>(undefined);\n  let onDown = (id?: number) => {\n    focusInput();\n    currentPointer.current = id;\n    state.setThumbDragging(index, true);\n\n    addGlobalListener(window, 'mouseup', onUp, false);\n    addGlobalListener(window, 'touchend', onUp, false);\n    addGlobalListener(window, 'pointerup', onUp, false);\n  };\n\n  let onUp = (e) => {\n    let id = e.pointerId ?? e.changedTouches?.[0].identifier;\n    if (id === currentPointer.current) {\n      focusInput();\n      state.setThumbDragging(index, false);\n      removeGlobalListener(window, 'mouseup', onUp, false);\n      removeGlobalListener(window, 'touchend', onUp, false);\n      removeGlobalListener(window, 'pointerup', onUp, false);\n    }\n  };\n\n  // We install mouse handlers for the drag motion on the thumb div, but\n  // not the key handler for moving the thumb with the slider.  Instead,\n  // we focus the range input, and let the browser handle the keyboard\n  // interactions; we then listen to input's onChange to update state.\n  return {\n    inputProps: mergeProps(focusableProps, fieldProps, {\n      'type': 'range',\n      'tabIndex': !isDisabled ? 0 : undefined,\n      'min': state.getThumbMinValue(index),\n      'max': state.getThumbMaxValue(index),\n      'step': state.step,\n      'value': value,\n      'disabled': isDisabled,\n      'aria-orientation': opts.orientation,\n      'aria-valuetext': state.getThumbValueLabel(index),\n      'aria-required': isRequired || undefined,\n      'aria-invalid': validationState === 'invalid' || undefined,\n      'aria-errormessage': opts['aria-errormessage'],\n      'onChange': (e: ChangeEvent<HTMLInputElement>) => {\n        state.setThumbValue(index, parseFloat(e.target.value));\n      },\n    }),\n    thumbProps: !isDisabled\n      ? mergeProps(moveProps, {\n          onMouseDown: (e: React.MouseEvent<HTMLElement>) => {\n            if (e.button !== 0 || e.altKey || e.ctrlKey || e.metaKey) {\n              return;\n            }\n            onDown();\n          },\n          onPointerDown: (e: React.PointerEvent<HTMLElement>) => {\n            if (e.button !== 0 || e.altKey || e.ctrlKey || e.metaKey) {\n              return;\n            }\n            onDown(e.pointerId);\n          },\n          onTouchStart: (e: React.TouchEvent<HTMLElement>) => {\n            onDown(e.changedTouches[0].identifier);\n          },\n        })\n      : {},\n    labelProps,\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}