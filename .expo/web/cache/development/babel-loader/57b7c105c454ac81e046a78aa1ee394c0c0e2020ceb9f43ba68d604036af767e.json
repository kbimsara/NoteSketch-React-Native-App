{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport { useMultipleSelectionState as $1OoTj$useMultipleSelectionState, SelectionManager as $1OoTj$SelectionManager } from \"@react-stately/selection\";\nimport { useMemo as $1OoTj$useMemo, useCallback as $1OoTj$useCallback, useEffect as $1OoTj$useEffect } from \"react\";\nimport { useCollection as $1OoTj$useCollection } from \"@react-stately/collections\";\nimport { useControlledState as $1OoTj$useControlledState } from \"@react-stately/utils\";\nvar $05ca4cd7c4a5a999$export$863faf230ee2118a = function () {\n  function $05ca4cd7c4a5a999$export$863faf230ee2118a(nodes) {\n    var _this = this;\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      expandedKeys = _ref.expandedKeys;\n    _classCallCheck(this, $05ca4cd7c4a5a999$export$863faf230ee2118a);\n    this.keyMap = new Map();\n    this.iterable = nodes;\n    expandedKeys = expandedKeys || new Set();\n    var visit = function visit(node) {\n      _this.keyMap.set(node.key, node);\n      if (node.childNodes && (node.type === \"section\" || expandedKeys.has(node.key))) for (var child of node.childNodes) visit(child);\n    };\n    for (var node of nodes) visit(node);\n    var last;\n    var index = 0;\n    for (var _ref2 of this.keyMap) {\n      var _ref3 = _slicedToArray(_ref2, 2);\n      var key = _ref3[0];\n      var _node = _ref3[1];\n      if (last) {\n        last.nextKey = key;\n        _node.prevKey = last.key;\n      } else {\n        this.firstKey = key;\n        _node.prevKey = undefined;\n      }\n      if (_node.type === \"item\") _node.index = index++;\n      last = _node;\n      last.nextKey = undefined;\n    }\n    this.lastKey = last === null || last === void 0 ? void 0 : last.key;\n  }\n  return _createClass($05ca4cd7c4a5a999$export$863faf230ee2118a, [{\n    key: Symbol.iterator,\n    value: function* value() {\n      yield* this.iterable;\n    }\n  }, {\n    key: \"size\",\n    get: function get() {\n      return this.keyMap.size;\n    }\n  }, {\n    key: \"getKeys\",\n    value: function getKeys() {\n      return this.keyMap.keys();\n    }\n  }, {\n    key: \"getKeyBefore\",\n    value: function getKeyBefore(key) {\n      var node = this.keyMap.get(key);\n      return node ? node.prevKey : null;\n    }\n  }, {\n    key: \"getKeyAfter\",\n    value: function getKeyAfter(key) {\n      var node = this.keyMap.get(key);\n      return node ? node.nextKey : null;\n    }\n  }, {\n    key: \"getFirstKey\",\n    value: function getFirstKey() {\n      return this.firstKey;\n    }\n  }, {\n    key: \"getLastKey\",\n    value: function getLastKey() {\n      return this.lastKey;\n    }\n  }, {\n    key: \"getItem\",\n    value: function getItem(key) {\n      return this.keyMap.get(key);\n    }\n  }, {\n    key: \"at\",\n    value: function at(idx) {\n      var keys = _toConsumableArray(this.getKeys());\n      return this.getItem(keys[idx]);\n    }\n  }]);\n}();\nfunction $875d6693e12af071$export$728d6ba534403756(props) {\n  var _ref4 = (0, $1OoTj$useControlledState)(props.expandedKeys ? new Set(props.expandedKeys) : undefined, props.defaultExpandedKeys ? new Set(props.defaultExpandedKeys) : new Set(), props.onExpandedChange),\n    _ref5 = _slicedToArray(_ref4, 2),\n    expandedKeys = _ref5[0],\n    setExpandedKeys = _ref5[1];\n  var selectionState = (0, $1OoTj$useMultipleSelectionState)(props);\n  var disabledKeys = (0, $1OoTj$useMemo)(function () {\n    return props.disabledKeys ? new Set(props.disabledKeys) : new Set();\n  }, [props.disabledKeys]);\n  var tree = (0, $1OoTj$useCollection)(props, (0, $1OoTj$useCallback)(function (nodes) {\n    return new (0, $05ca4cd7c4a5a999$export$863faf230ee2118a)(nodes, {\n      expandedKeys: expandedKeys\n    });\n  }, [expandedKeys]), null);\n  (0, $1OoTj$useEffect)(function () {\n    if (selectionState.focusedKey != null && !tree.getItem(selectionState.focusedKey)) selectionState.setFocusedKey(null);\n  }, [tree, selectionState.focusedKey]);\n  var onToggle = function onToggle(key) {\n    setExpandedKeys($875d6693e12af071$var$toggleKey(expandedKeys, key));\n  };\n  return {\n    collection: tree,\n    expandedKeys: expandedKeys,\n    disabledKeys: disabledKeys,\n    toggleKey: onToggle,\n    setExpandedKeys: setExpandedKeys,\n    selectionManager: new (0, $1OoTj$SelectionManager)(tree, selectionState)\n  };\n}\nfunction $875d6693e12af071$var$toggleKey(set, key) {\n  var res = new Set(set);\n  if (res.has(key)) res.delete(key);else res.add(key);\n  return res;\n}\nexport { $875d6693e12af071$export$728d6ba534403756 as useTreeState, $05ca4cd7c4a5a999$export$863faf230ee2118a as TreeCollection };","map":{"version":3,"names":["$05ca4cd7c4a5a999$export$863faf230ee2118a","nodes","_this","_ref","arguments","length","undefined","expandedKeys","_classCallCheck","keyMap","Map","iterable","Set","visit","node","set","key","childNodes","type","has","child","last","index","_ref2","_ref3","_slicedToArray","nextKey","prevKey","firstKey","lastKey","_createClass","Symbol","iterator","value","get","size","getKeys","keys","getKeyBefore","getKeyAfter","getFirstKey","getLastKey","getItem","at","idx","_toConsumableArray","$875d6693e12af071$export$728d6ba534403756","props","_ref4","$1OoTj$useControlledState","defaultExpandedKeys","onExpandedChange","_ref5","setExpandedKeys","selectionState","$1OoTj$useMultipleSelectionState","disabledKeys","$1OoTj$useMemo","tree","$1OoTj$useCollection","$1OoTj$useCallback","$1OoTj$useEffect","focusedKey","setFocusedKey","onToggle","$875d6693e12af071$var$toggleKey","collection","toggleKey","selectionManager","$1OoTj$SelectionManager","res","delete","add"],"sources":["D:\\React Native\\Expo+glustack\\NoteSketch\\node_modules\\@react-stately\\tree\\dist\\packages\\@react-stately\\tree\\src\\index.ts","D:\\React Native\\Expo+glustack\\NoteSketch\\node_modules\\@react-stately\\tree\\dist\\packages\\@react-stately\\tree\\src\\useTreeState.ts","D:\\React Native\\Expo+glustack\\NoteSketch\\node_modules\\@react-stately\\tree\\dist\\packages\\@react-stately\\tree\\src\\TreeCollection.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nexport type {TreeProps, TreeState} from './useTreeState';\nexport {useTreeState} from './useTreeState';\nexport {TreeCollection} from './TreeCollection';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Collection, CollectionStateBase, Expandable, Key, MultipleSelection, Node} from '@react-types/shared';\nimport {SelectionManager, useMultipleSelectionState} from '@react-stately/selection';\nimport {TreeCollection} from './TreeCollection';\nimport {useCallback, useEffect, useMemo} from 'react';\nimport {useCollection} from '@react-stately/collections';\nimport {useControlledState} from '@react-stately/utils';\n\nexport interface TreeProps<T> extends CollectionStateBase<T>, Expandable, MultipleSelection {}\nexport interface TreeState<T> {\n  /** A collection of items in the tree. */\n  readonly collection: Collection<Node<T>>,\n\n  /** A set of keys for items that are disabled. */\n  readonly disabledKeys: Set<Key>,\n\n  /** A set of keys for items that are expanded. */\n  readonly expandedKeys: Set<Key>,\n\n  /** Toggles the expanded state for an item by its key. */\n  toggleKey(key: Key): void,\n\n  /** Replaces the set of expanded keys. */\n  setExpandedKeys(keys: Set<Key>): void,\n\n  /** A selection manager to read and update multiple selection state. */\n  readonly selectionManager: SelectionManager\n}\n\n/**\n * Provides state management for tree-like components. Handles building a collection\n * of items from props, item expanded state, and manages multiple selection state.\n */\nexport function useTreeState<T extends object>(props: TreeProps<T>): TreeState<T> {\n  let [expandedKeys, setExpandedKeys] = useControlledState(\n    props.expandedKeys ? new Set(props.expandedKeys) : undefined,\n    props.defaultExpandedKeys ? new Set(props.defaultExpandedKeys) : new Set(),\n    props.onExpandedChange\n  );\n\n  let selectionState = useMultipleSelectionState(props);\n  let disabledKeys = useMemo(() =>\n    props.disabledKeys ? new Set(props.disabledKeys) : new Set<Key>()\n  , [props.disabledKeys]);\n\n  let tree = useCollection(props, useCallback(nodes => new TreeCollection(nodes, {expandedKeys}), [expandedKeys]), null);\n\n  // Reset focused key if that item is deleted from the collection.\n  useEffect(() => {\n    if (selectionState.focusedKey != null && !tree.getItem(selectionState.focusedKey)) {\n      selectionState.setFocusedKey(null);\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [tree, selectionState.focusedKey]);\n\n  let onToggle = (key: Key) => {\n    setExpandedKeys(toggleKey(expandedKeys, key));\n  };\n\n  return {\n    collection: tree,\n    expandedKeys,\n    disabledKeys,\n    toggleKey: onToggle,\n    setExpandedKeys,\n    selectionManager: new SelectionManager(tree, selectionState)\n  };\n}\n\nfunction toggleKey(set: Set<Key>, key: Key): Set<Key> {\n  let res = new Set(set);\n  if (res.has(key)) {\n    res.delete(key);\n  } else {\n    res.add(key);\n  }\n\n  return res;\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Collection, Key, Node} from '@react-types/shared';\n\nexport class TreeCollection<T> implements Collection<Node<T>> {\n  private keyMap: Map<Key, Node<T>> = new Map();\n  private iterable: Iterable<Node<T>>;\n  private firstKey: Key;\n  private lastKey: Key;\n\n  constructor(nodes: Iterable<Node<T>>, {expandedKeys}: {expandedKeys?: Set<Key>} = {}) {\n    this.iterable = nodes;\n    expandedKeys = expandedKeys || new Set();\n\n    let visit = (node: Node<T>) => {\n      this.keyMap.set(node.key, node);\n\n      if (node.childNodes && (node.type === 'section' || expandedKeys.has(node.key))) {\n        for (let child of node.childNodes) {\n          visit(child);\n        }\n      }\n    };\n\n    for (let node of nodes) {\n      visit(node);\n    }\n\n    let last: Node<T>;\n    let index = 0;\n    for (let [key, node] of this.keyMap) {\n      if (last) {\n        last.nextKey = key;\n        node.prevKey = last.key;\n      } else {\n        this.firstKey = key;\n        node.prevKey = undefined;\n      }\n\n      if (node.type === 'item') {\n        node.index = index++;\n      }\n\n      last = node;\n\n      // Set nextKey as undefined since this might be the last node\n      // If it isn't the last node, last.nextKey will properly set at start of new loop\n      last.nextKey = undefined;\n    }\n\n    this.lastKey = last?.key;\n  }\n\n  *[Symbol.iterator]() {\n    yield* this.iterable;\n  }\n\n  get size() {\n    return this.keyMap.size;\n  }\n\n  getKeys() {\n    return this.keyMap.keys();\n  }\n\n  getKeyBefore(key: Key) {\n    let node = this.keyMap.get(key);\n    return node ? node.prevKey : null;\n  }\n\n  getKeyAfter(key: Key) {\n    let node = this.keyMap.get(key);\n    return node ? node.nextKey : null;\n  }\n\n  getFirstKey() {\n    return this.firstKey;\n  }\n\n  getLastKey() {\n    return this.lastKey;\n  }\n\n  getItem(key: Key) {\n    return this.keyMap.get(key);\n  }\n\n  at(idx: number) {\n    const keys = [...this.getKeys()];\n    return this.getItem(keys[idx]);\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}