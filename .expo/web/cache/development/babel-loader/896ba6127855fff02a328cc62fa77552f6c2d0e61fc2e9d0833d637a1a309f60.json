{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport getCss from 'dom-helpers/css';\nimport getOffset from 'dom-helpers/offset';\nimport getPosition from 'dom-helpers/position';\nimport getScrollLeft from 'dom-helpers/scrollLeft';\nimport getScrollTop from 'dom-helpers/scrollTop';\nimport ownerDocument from 'dom-helpers/ownerDocument';\nimport getComputedStyle from 'dom-helpers/getComputedStyle';\nvar AXIS = {\n  top: 'top',\n  bottom: 'top',\n  left: 'left',\n  right: 'left'\n};\nvar FLIPPED_DIRECTION = {\n  top: 'bottom',\n  bottom: 'top',\n  left: 'right',\n  right: 'left'\n};\nvar CROSS_AXIS = {\n  top: 'left',\n  left: 'top'\n};\nvar AXIS_SIZE = {\n  top: 'height',\n  left: 'width'\n};\nvar PARSED_PLACEMENT_CACHE = {};\nvar visualViewport = typeof window !== 'undefined' && window.visualViewport;\nfunction getContainerDimensions(containerNode) {\n  var width = 0,\n    height = 0,\n    top = 0,\n    left = 0;\n  var scroll = {};\n  if (containerNode.tagName === 'BODY') {\n    var _ref, _ref2;\n    width = (_ref = visualViewport === null || visualViewport === void 0 ? void 0 : visualViewport.width) != null ? _ref : document.documentElement.clientWidth;\n    height = (_ref2 = visualViewport === null || visualViewport === void 0 ? void 0 : visualViewport.height) != null ? _ref2 : document.documentElement.clientHeight;\n    scroll.top = getScrollTop(ownerDocument(containerNode).documentElement) || getScrollTop(containerNode);\n    scroll.left = getScrollLeft(ownerDocument(containerNode).documentElement) || getScrollLeft(containerNode);\n  } else {\n    var _getOffset = getOffset(containerNode);\n    width = _getOffset.width;\n    height = _getOffset.height;\n    top = _getOffset.top;\n    left = _getOffset.left;\n    scroll.top = getScrollTop(containerNode);\n    scroll.left = getScrollLeft(containerNode);\n  }\n  return {\n    width: width,\n    height: height,\n    scroll: scroll,\n    top: top,\n    left: left\n  };\n}\nfunction getScroll(node) {\n  return {\n    top: node.scrollTop,\n    left: node.scrollLeft,\n    width: node.scrollWidth,\n    height: node.scrollHeight\n  };\n}\nfunction getDelta(axis, offset, size, containerDimensions, padding) {\n  var containerScroll = containerDimensions.scroll[axis];\n  var containerHeight = containerDimensions[AXIS_SIZE[axis]];\n  var startEdgeOffset = offset - padding - containerScroll;\n  var endEdgeOffset = offset + padding - containerScroll + size;\n  if (startEdgeOffset < 0) {\n    return -startEdgeOffset;\n  } else if (endEdgeOffset > containerHeight) {\n    return Math.max(containerHeight - endEdgeOffset, -startEdgeOffset);\n  } else {\n    return 0;\n  }\n}\nfunction getMargins(node) {\n  var style = window.getComputedStyle(node);\n  return {\n    top: parseInt(style.marginTop, 10) || 0,\n    bottom: parseInt(style.marginBottom, 10) || 0,\n    left: parseInt(style.marginLeft, 10) || 0,\n    right: parseInt(style.marginRight, 10) || 0\n  };\n}\nfunction parsePlacement(input) {\n  if (PARSED_PLACEMENT_CACHE[input]) {\n    return PARSED_PLACEMENT_CACHE[input];\n  }\n  var _input$split = input.split(' '),\n    _input$split2 = _slicedToArray(_input$split, 2),\n    placement = _input$split2[0],\n    crossPlacement = _input$split2[1];\n  var axis = AXIS[placement] || 'right';\n  var crossAxis = CROSS_AXIS[axis];\n  if (!AXIS[crossPlacement]) {\n    crossPlacement = 'center';\n  }\n  var size = AXIS_SIZE[axis];\n  var crossSize = AXIS_SIZE[crossAxis];\n  PARSED_PLACEMENT_CACHE[input] = {\n    placement: placement,\n    crossPlacement: crossPlacement,\n    axis: axis,\n    crossAxis: crossAxis,\n    size: size,\n    crossSize: crossSize\n  };\n  return PARSED_PLACEMENT_CACHE[input];\n}\nfunction computePosition(childOffset, boundaryDimensions, overlaySize, placementInfo, offset, crossOffset, containerOffsetWithBoundary, isContainerPositioned) {\n  var placement = placementInfo.placement,\n    crossPlacement = placementInfo.crossPlacement,\n    axis = placementInfo.axis,\n    crossAxis = placementInfo.crossAxis,\n    size = placementInfo.size,\n    crossSize = placementInfo.crossSize;\n  var position = {};\n  position[crossAxis] = childOffset[crossAxis];\n  if (crossPlacement === 'center') {\n    position[crossAxis] += (childOffset[crossSize] - overlaySize[crossSize]) / 2;\n  } else if (crossPlacement !== crossAxis) {\n    position[crossAxis] += childOffset[crossSize] - overlaySize[crossSize];\n  }\n  position[crossAxis] += crossOffset;\n  if (placement === axis) {\n    var containerHeight = isContainerPositioned ? containerOffsetWithBoundary[size] : boundaryDimensions[size];\n    position[FLIPPED_DIRECTION[axis]] = Math.floor(containerHeight - childOffset[axis] + offset);\n  } else {\n    position[axis] = Math.floor(childOffset[axis] + childOffset[size] + offset);\n  }\n  return position;\n}\nfunction getMaxHeight(position, boundaryDimensions, containerOffsetWithBoundary, childOffset, margins, padding) {\n  return position.top != null ? Math.max(0, boundaryDimensions.height + boundaryDimensions.top + boundaryDimensions.scroll.top - (containerOffsetWithBoundary.top + position.top) - (margins.top + margins.bottom + padding)) : Math.max(0, childOffset.top + containerOffsetWithBoundary.top - (boundaryDimensions.top + boundaryDimensions.scroll.top) - (margins.top + margins.bottom + padding));\n}\nfunction getAvailableSpace(boundaryDimensions, containerOffsetWithBoundary, childOffset, margins, padding, placementInfo) {\n  var placement = placementInfo.placement,\n    axis = placementInfo.axis,\n    size = placementInfo.size;\n  if (placement === axis) {\n    return Math.max(0, childOffset[axis] - boundaryDimensions[axis] - boundaryDimensions.scroll[axis] + containerOffsetWithBoundary[axis] - margins[axis] - margins[FLIPPED_DIRECTION[axis]] - padding);\n  }\n  return Math.max(0, boundaryDimensions[size] + boundaryDimensions[axis] + boundaryDimensions.scroll[axis] - containerOffsetWithBoundary[axis] - childOffset[axis] - childOffset[size] - margins[axis] - margins[FLIPPED_DIRECTION[axis]] - padding);\n}\nexport function calculatePositionInternal(placementInput, childOffset, overlaySize, scrollSize, margins, padding, flip, boundaryDimensions, containerOffsetWithBoundary, offset, crossOffset, isContainerPositioned, shouldOverlapWithTrigger) {\n  var placementInfo = parsePlacement(placementInput);\n  var _placementInfo = placementInfo,\n    size = _placementInfo.size,\n    crossAxis = _placementInfo.crossAxis,\n    crossSize = _placementInfo.crossSize,\n    placement = _placementInfo.placement,\n    crossPlacement = _placementInfo.crossPlacement,\n    axis = _placementInfo.axis;\n  var position = computePosition(childOffset, boundaryDimensions, overlaySize, placementInfo, offset, crossOffset, containerOffsetWithBoundary, isContainerPositioned);\n  var normalizedOffset = offset;\n  var space = getAvailableSpace(boundaryDimensions, containerOffsetWithBoundary, childOffset, margins, padding + offset, placementInfo);\n  if (flip && scrollSize[size] > space) {\n    var flippedPlacementInfo = parsePlacement(`${FLIPPED_DIRECTION[placement]} ${crossPlacement}`);\n    var flippedPosition = computePosition(childOffset, boundaryDimensions, overlaySize, flippedPlacementInfo, offset, crossOffset, containerOffsetWithBoundary, isContainerPositioned);\n    var flippedSpace = getAvailableSpace(boundaryDimensions, containerOffsetWithBoundary, childOffset, margins, padding + offset, flippedPlacementInfo);\n    if (flippedSpace > space) {\n      placementInfo = flippedPlacementInfo;\n      position = flippedPosition;\n      normalizedOffset = offset;\n    }\n  }\n  var delta = getDelta(crossAxis, position[crossAxis], overlaySize[crossSize], boundaryDimensions, padding);\n  position[crossAxis] += delta;\n  var maxHeight = getMaxHeight(position, boundaryDimensions, containerOffsetWithBoundary, childOffset, margins, padding);\n  overlaySize.height = Math.min(overlaySize.height, maxHeight);\n  position = computePosition(childOffset, boundaryDimensions, overlaySize, placementInfo, normalizedOffset, crossOffset, containerOffsetWithBoundary, isContainerPositioned);\n  delta = getDelta(crossAxis, position[crossAxis], overlaySize[crossSize], boundaryDimensions, padding);\n  position[crossAxis] += delta;\n  var arrowPosition = {};\n  arrowPosition[crossAxis] = childOffset[crossAxis] - position[crossAxis] + childOffset[crossSize] / 2;\n  if (shouldOverlapWithTrigger) {\n    position[FLIPPED_DIRECTION[placementInfo.placement]] = position[FLIPPED_DIRECTION[placementInfo.placement]] - childOffset[size];\n  }\n  return {\n    position: position,\n    maxHeight: maxHeight,\n    arrowOffsetLeft: arrowPosition.left,\n    arrowOffsetTop: arrowPosition.top,\n    placement: placementInfo.placement\n  };\n}\nexport function calculatePosition(opts) {\n  var placement = opts.placement,\n    targetNode = opts.targetNode,\n    overlayNode = opts.overlayNode,\n    scrollNode = opts.scrollNode,\n    padding = opts.padding,\n    shouldFlip = opts.shouldFlip,\n    boundaryElement = opts.boundaryElement,\n    offset = opts.offset,\n    crossOffset = opts.crossOffset,\n    shouldOverlapWithTrigger = opts.shouldOverlapWithTrigger;\n  var container = overlayNode.offsetParent || document.body;\n  var isBodyContainer = container.tagName === 'BODY';\n  var containerPositionStyle = window.getComputedStyle(container).position;\n  var isContainerPositioned = !!containerPositionStyle && containerPositionStyle !== 'static';\n  var childOffset = isBodyContainer ? getOffset(targetNode) : getPosition(targetNode, container);\n  if (!isBodyContainer) {\n    childOffset.top += parseInt(getCss(targetNode, 'marginTop'), 10) || 0;\n    childOffset.left += parseInt(getCss(targetNode, 'marginLeft'), 10) || 0;\n  }\n  var overlaySize = getOffset(overlayNode);\n  var matrix = getComputedStyle(overlayNode).getPropertyValue('transform');\n  var transform = matrix;\n  var regex = /matrix\\((-?\\d*\\.?\\d+),\\s*(-?\\d*\\.?\\d+),\\s*(-?\\d*\\.?\\d+),\\s*(-?\\d*\\.?\\d+),\\s*(-?\\d*\\.?\\d+),\\s*(-?\\d*\\.?\\d+)\\)/;\n  var matches = transform.match(regex);\n  var scaleX = 1;\n  var scaleY = 1;\n  if (matches) {\n    scaleX = parseFloat(matches[1]);\n    scaleY = parseFloat(matches[4]);\n    if (!scaleX || !Number.isFinite(scaleX)) {\n      scaleX = 1;\n    }\n    if (!scaleY || !Number.isFinite(scaleY)) {\n      scaleY = 1;\n    }\n  }\n  var margins = getMargins(overlayNode);\n  overlaySize.width += margins.left + margins.right;\n  overlaySize.height += margins.top + margins.bottom;\n  if (scaleX) {\n    overlaySize.width = overlaySize.width / scaleX;\n  }\n  if (scaleY) {\n    overlaySize.height = overlaySize.height / scaleY;\n  }\n  var scrollSize = getScroll(scrollNode);\n  var boundaryDimensions = getContainerDimensions(boundaryElement);\n  var containerOffsetWithBoundary = boundaryElement.tagName === 'BODY' ? getOffset(container) : getPosition(container, boundaryElement);\n  return calculatePositionInternal(placement, childOffset, overlaySize, scrollSize, margins, padding, shouldFlip, boundaryDimensions, containerOffsetWithBoundary, offset, crossOffset, isContainerPositioned, shouldOverlapWithTrigger);\n}","map":{"version":3,"names":["getCss","getOffset","getPosition","getScrollLeft","getScrollTop","ownerDocument","getComputedStyle","AXIS","top","bottom","left","right","FLIPPED_DIRECTION","CROSS_AXIS","AXIS_SIZE","PARSED_PLACEMENT_CACHE","visualViewport","window","getContainerDimensions","containerNode","width","height","scroll","tagName","_ref","_ref2","document","documentElement","clientWidth","clientHeight","_getOffset","getScroll","node","scrollTop","scrollLeft","scrollWidth","scrollHeight","getDelta","axis","offset","size","containerDimensions","padding","containerScroll","containerHeight","startEdgeOffset","endEdgeOffset","Math","max","getMargins","style","parseInt","marginTop","marginBottom","marginLeft","marginRight","parsePlacement","input","_input$split","split","_input$split2","_slicedToArray","placement","crossPlacement","crossAxis","crossSize","computePosition","childOffset","boundaryDimensions","overlaySize","placementInfo","crossOffset","containerOffsetWithBoundary","isContainerPositioned","position","floor","getMaxHeight","margins","getAvailableSpace","calculatePositionInternal","placementInput","scrollSize","flip","shouldOverlapWithTrigger","_placementInfo","normalizedOffset","space","flippedPlacementInfo","flippedPosition","flippedSpace","delta","maxHeight","min","arrowPosition","arrowOffsetLeft","arrowOffsetTop","calculatePosition","opts","targetNode","overlayNode","scrollNode","shouldFlip","boundaryElement","container","offsetParent","body","isBodyContainer","containerPositionStyle","matrix","getPropertyValue","transform","regex","matches","match","scaleX","scaleY","parseFloat","Number","isFinite"],"sources":["D:\\React Native\\Expo+glustack\\NoteSketch\\node_modules\\@react-native-aria\\overlays\\src\\web\\overlays\\src\\calculatePosition.ts"],"sourcesContent":["// @ts-nocheck\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {\n  Axis,\n  Placement,\n  PlacementAxis,\n  SizeAxis,\n} from '@react-types/overlays';\nimport getCss from 'dom-helpers/css';\nimport getOffset from 'dom-helpers/offset';\nimport getPosition from 'dom-helpers/position';\nimport getScrollLeft from 'dom-helpers/scrollLeft';\nimport getScrollTop from 'dom-helpers/scrollTop';\nimport ownerDocument from 'dom-helpers/ownerDocument';\nimport getComputedStyle from 'dom-helpers/getComputedStyle';\n\ninterface Position {\n  top?: number;\n  left?: number;\n  bottom?: number;\n  right?: number;\n}\n\ninterface Dimensions {\n  width: number;\n  height: number;\n  top: number;\n  left: number;\n  scroll: Position;\n}\n\ninterface ParsedPlacement {\n  placement: PlacementAxis;\n  crossPlacement: PlacementAxis;\n  axis: Axis;\n  crossAxis: Axis;\n  size: SizeAxis;\n  crossSize: SizeAxis;\n}\n\ninterface Offset {\n  top: number;\n  left: number;\n  width: number;\n  height: number;\n}\n\ninterface PositionOpts {\n  placement: Placement;\n  targetNode: HTMLElement;\n  overlayNode: HTMLElement;\n  scrollNode: HTMLElement;\n  padding: number;\n  shouldFlip: boolean;\n  boundaryElement: HTMLElement;\n  offset: number;\n  crossOffset: number;\n  shouldOverlapWithTrigger: boolean;\n}\n\nexport interface PositionResult {\n  position?: Position;\n  arrowOffsetLeft?: number;\n  arrowOffsetTop?: number;\n  maxHeight?: number;\n  placement: PlacementAxis;\n}\n\nconst AXIS = {\n  top: 'top',\n  bottom: 'top',\n  left: 'left',\n  right: 'left',\n};\n\nconst FLIPPED_DIRECTION = {\n  top: 'bottom',\n  bottom: 'top',\n  left: 'right',\n  right: 'left',\n};\n\nconst CROSS_AXIS = {\n  top: 'left',\n  left: 'top',\n};\n\nconst AXIS_SIZE = {\n  top: 'height',\n  left: 'width',\n};\n\nconst PARSED_PLACEMENT_CACHE = {};\n\n// @ts-ignore\nlet visualViewport = typeof window !== 'undefined' && window.visualViewport;\n\nfunction getContainerDimensions(containerNode: Element): Dimensions {\n  let width = 0,\n    height = 0,\n    top = 0,\n    left = 0;\n  let scroll: Position = {};\n\n  if (containerNode.tagName === 'BODY') {\n    width = visualViewport?.width ?? document.documentElement.clientWidth;\n    height = visualViewport?.height ?? document.documentElement.clientHeight;\n\n    scroll.top =\n      getScrollTop(ownerDocument(containerNode).documentElement) ||\n      getScrollTop(containerNode);\n    scroll.left =\n      getScrollLeft(ownerDocument(containerNode).documentElement) ||\n      getScrollLeft(containerNode);\n  } else {\n    ({ width, height, top, left } = getOffset(containerNode));\n    scroll.top = getScrollTop(containerNode);\n    scroll.left = getScrollLeft(containerNode);\n  }\n\n  return { width, height, scroll, top, left };\n}\n\nfunction getScroll(node: HTMLElement): Offset {\n  return {\n    top: node.scrollTop,\n    left: node.scrollLeft,\n    width: node.scrollWidth,\n    height: node.scrollHeight,\n  };\n}\n\nfunction getDelta(\n  axis: Axis,\n  offset: number,\n  size: number,\n  containerDimensions: Dimensions,\n  padding: number\n) {\n  let containerScroll = containerDimensions.scroll[axis];\n  let containerHeight = containerDimensions[AXIS_SIZE[axis]];\n\n  let startEdgeOffset = offset - padding - containerScroll;\n  let endEdgeOffset = offset + padding - containerScroll + size;\n\n  if (startEdgeOffset < 0) {\n    return -startEdgeOffset;\n  } else if (endEdgeOffset > containerHeight) {\n    return Math.max(containerHeight - endEdgeOffset, -startEdgeOffset);\n  } else {\n    return 0;\n  }\n}\n\nfunction getMargins(node: HTMLElement): Position {\n  let style = window.getComputedStyle(node);\n  return {\n    top: parseInt(style.marginTop, 10) || 0,\n    bottom: parseInt(style.marginBottom, 10) || 0,\n    left: parseInt(style.marginLeft, 10) || 0,\n    right: parseInt(style.marginRight, 10) || 0,\n  };\n}\n\nfunction parsePlacement(input: Placement): ParsedPlacement {\n  if (PARSED_PLACEMENT_CACHE[input]) {\n    return PARSED_PLACEMENT_CACHE[input];\n  }\n\n  let [placement, crossPlacement] = input.split(' ');\n  let axis: Axis = AXIS[placement] || 'right';\n  let crossAxis: Axis = CROSS_AXIS[axis];\n\n  if (!AXIS[crossPlacement]) {\n    crossPlacement = 'center';\n  }\n\n  let size = AXIS_SIZE[axis];\n  let crossSize = AXIS_SIZE[crossAxis];\n  PARSED_PLACEMENT_CACHE[input] = {\n    placement,\n    crossPlacement,\n    axis,\n    crossAxis,\n    size,\n    crossSize,\n  };\n  return PARSED_PLACEMENT_CACHE[input];\n}\n\nfunction computePosition(\n  childOffset: Offset,\n  boundaryDimensions: Dimensions,\n  overlaySize: Offset,\n  placementInfo: ParsedPlacement,\n  offset: number,\n  crossOffset: number,\n  containerOffsetWithBoundary: Offset,\n  isContainerPositioned: boolean\n) {\n  let {\n    placement,\n    crossPlacement,\n    axis,\n    crossAxis,\n    size,\n    crossSize,\n  } = placementInfo;\n  let position: Position = {};\n\n  // button position\n  position[crossAxis] = childOffset[crossAxis];\n\n  if (crossPlacement === 'center') {\n    //  + (button size / 2) - (overlay size / 2)\n    // at this point the overlay center should match the button center\n    position[crossAxis] +=\n      (childOffset[crossSize] - overlaySize[crossSize]) / 2;\n  } else if (crossPlacement !== crossAxis) {\n    //  + (button size) - (overlay size)\n    // at this point the overlay bottom should match the button bottom\n    position[crossAxis] += childOffset[crossSize] - overlaySize[crossSize];\n  } /* else {\n    the overlay top should match the button top\n  } */\n  // add the crossOffset from props\n  position[crossAxis] += crossOffset;\n\n  // // this is button center position - the overlay size + half of the button to align bottom of overlay with button center\n  // let minViablePosition =\n  //   childOffset[crossAxis] +\n  //   childOffset[crossSize] / 2 -\n  //   overlaySize[crossSize];\n  // // this is button position of center, aligns top of overlay with button center\n  // let maxViablePosition = childOffset[crossAxis] + childOffset[crossSize] / 2;\n\n  // // clamp it into the range of the min/max positions\n  // position[crossAxis] = Math.min(\n  //   Math.max(minViablePosition, position[crossAxis]),\n  //   maxViablePosition\n  // );\n\n  // Floor these so the position isn't placed on a partial pixel, only whole pixels. Shouldn't matter if it was floored or ceiled, so chose one.\n  if (placement === axis) {\n    // If the container is positioned (non-static), then we use the container's actual\n    // height, as `bottom` will be relative to this height.  But if the container is static,\n    // then it can only be the `document.body`, and `bottom` will be relative to _its_\n    // container, which should be as large as boundaryDimensions.\n    const containerHeight = isContainerPositioned\n      ? containerOffsetWithBoundary[size]\n      : boundaryDimensions[size];\n    position[FLIPPED_DIRECTION[axis]] = Math.floor(\n      containerHeight - childOffset[axis] + offset\n    );\n  } else {\n    position[axis] = Math.floor(childOffset[axis] + childOffset[size] + offset);\n  }\n\n  return position;\n}\n\nfunction getMaxHeight(\n  position: Position,\n  boundaryDimensions: Dimensions,\n  containerOffsetWithBoundary: Offset,\n  childOffset: Offset,\n  margins: Position,\n  padding: number\n) {\n  return position.top != null\n    ? // We want the distance between the top of the overlay to the bottom of the boundary\n    Math.max(\n      0,\n      boundaryDimensions.height +\n      boundaryDimensions.top +\n      boundaryDimensions.scroll.top - // this is the bottom of the boundary\n      (containerOffsetWithBoundary.top + position.top) - // this is the top of the overlay\n      (margins.top + margins.bottom + padding) // save additional space for margin and padding\n    )\n    : // We want the distance between the top of the trigger to the top of the boundary\n    Math.max(\n      0,\n      childOffset.top +\n      containerOffsetWithBoundary.top - // this is the top of the trigger\n      (boundaryDimensions.top + boundaryDimensions.scroll.top) - // this is the top of the boundary\n      (margins.top + margins.bottom + padding) // save additional space for margin and padding\n    );\n}\n\nfunction getAvailableSpace(\n  boundaryDimensions: Dimensions,\n  containerOffsetWithBoundary: Offset,\n  childOffset: Offset,\n  margins: Position,\n  padding: number,\n  placementInfo: ParsedPlacement\n) {\n  let { placement, axis, size } = placementInfo;\n  if (placement === axis) {\n    return Math.max(\n      0,\n      childOffset[axis] -\n      boundaryDimensions[axis] -\n      boundaryDimensions.scroll[axis] +\n      containerOffsetWithBoundary[axis] -\n      margins[axis] -\n      margins[FLIPPED_DIRECTION[axis]] -\n      padding\n    );\n  }\n\n  return Math.max(\n    0,\n    boundaryDimensions[size] +\n    boundaryDimensions[axis] +\n    boundaryDimensions.scroll[axis] -\n    containerOffsetWithBoundary[axis] -\n    childOffset[axis] -\n    childOffset[size] -\n    margins[axis] -\n    margins[FLIPPED_DIRECTION[axis]] -\n    padding\n  );\n}\n\nexport function calculatePositionInternal(\n  placementInput: Placement,\n  childOffset: Offset,\n  overlaySize: Offset,\n  scrollSize: Offset,\n  margins: Position,\n  padding: number,\n  flip: boolean,\n  boundaryDimensions: Dimensions,\n  containerOffsetWithBoundary: Offset,\n  offset: number,\n  crossOffset: number,\n  isContainerPositioned: boolean,\n  shouldOverlapWithTrigger: boolean\n): PositionResult {\n  let placementInfo = parsePlacement(placementInput);\n  let {\n    size,\n    crossAxis,\n    crossSize,\n    placement,\n    crossPlacement,\n    axis,\n  } = placementInfo;\n  let position = computePosition(\n    childOffset,\n    boundaryDimensions,\n    overlaySize,\n    placementInfo,\n    offset,\n    crossOffset,\n    containerOffsetWithBoundary,\n    isContainerPositioned\n  );\n\n  let normalizedOffset = offset;\n  let space = getAvailableSpace(\n    boundaryDimensions,\n    containerOffsetWithBoundary,\n    childOffset,\n    margins,\n    padding + offset,\n    placementInfo\n  );\n\n  // Check if the scroll size of the overlay is greater than the available space to determine if we need to flip\n  if (flip && scrollSize[size] > space) {\n    let flippedPlacementInfo = parsePlacement(\n      `${FLIPPED_DIRECTION[placement]} ${crossPlacement}` as Placement\n    );\n    let flippedPosition = computePosition(\n      childOffset,\n      boundaryDimensions,\n      overlaySize,\n      flippedPlacementInfo,\n      offset,\n      crossOffset,\n      containerOffsetWithBoundary,\n      isContainerPositioned\n    );\n    let flippedSpace = getAvailableSpace(\n      boundaryDimensions,\n      containerOffsetWithBoundary,\n      childOffset,\n      margins,\n      padding + offset,\n      flippedPlacementInfo\n    );\n\n    // If the available space for the flipped position is greater than the original available space, flip.\n    if (flippedSpace > space) {\n      placementInfo = flippedPlacementInfo;\n      position = flippedPosition;\n      normalizedOffset = offset;\n    }\n  }\n\n  let delta = getDelta(\n    crossAxis,\n    position[crossAxis],\n    overlaySize[crossSize],\n    boundaryDimensions,\n    padding\n  );\n  position[crossAxis] += delta;\n\n  let maxHeight = getMaxHeight(\n    position,\n    boundaryDimensions,\n    containerOffsetWithBoundary,\n    childOffset,\n    margins,\n    padding\n  );\n\n  overlaySize.height = Math.min(overlaySize.height, maxHeight);\n\n  position = computePosition(\n    childOffset,\n    boundaryDimensions,\n    overlaySize,\n    placementInfo,\n    normalizedOffset,\n    crossOffset,\n    containerOffsetWithBoundary,\n    isContainerPositioned\n  );\n  delta = getDelta(\n    crossAxis,\n    position[crossAxis],\n    overlaySize[crossSize],\n    boundaryDimensions,\n    padding\n  );\n  position[crossAxis] += delta;\n\n  let arrowPosition: Position = {};\n  arrowPosition[crossAxis] =\n    childOffset[crossAxis] - position[crossAxis] + childOffset[crossSize] / 2;\n\n  if (shouldOverlapWithTrigger) {\n    position[FLIPPED_DIRECTION[placementInfo.placement]] =\n      position[FLIPPED_DIRECTION[placementInfo.placement]] - childOffset[size];\n  }\n\n  return {\n    position,\n    maxHeight: maxHeight,\n    arrowOffsetLeft: arrowPosition.left,\n    arrowOffsetTop: arrowPosition.top,\n    placement: placementInfo.placement,\n  };\n}\n\n/**\n * Determines where to place the overlay with regards to the target and the position of an optional indicator.\n */\nexport function calculatePosition(opts: PositionOpts): PositionResult {\n  let {\n    placement,\n    targetNode,\n    overlayNode,\n    scrollNode,\n    padding,\n    shouldFlip,\n    boundaryElement,\n    offset,\n    crossOffset,\n    shouldOverlapWithTrigger,\n  } = opts;\n\n  let container = overlayNode.offsetParent || document.body;\n  let isBodyContainer = container.tagName === 'BODY';\n  const containerPositionStyle = window.getComputedStyle(container).position;\n  let isContainerPositioned =\n    !!containerPositionStyle && containerPositionStyle !== 'static';\n  let childOffset: Offset = isBodyContainer\n    ? getOffset(targetNode)\n    : getPosition(targetNode, container);\n\n  if (!isBodyContainer) {\n    childOffset.top += parseInt(getCss(targetNode, 'marginTop'), 10) || 0;\n    childOffset.left += parseInt(getCss(targetNode, 'marginLeft'), 10) || 0;\n  }\n\n  let overlaySize: Offset = getOffset(overlayNode);\n  const matrix = getComputedStyle(overlayNode).getPropertyValue('transform');\n  const transform = matrix;\n  const regex = /matrix\\((-?\\d*\\.?\\d+),\\s*(-?\\d*\\.?\\d+),\\s*(-?\\d*\\.?\\d+),\\s*(-?\\d*\\.?\\d+),\\s*(-?\\d*\\.?\\d+),\\s*(-?\\d*\\.?\\d+)\\)/;\n  const matches = transform.match(regex);\n  let scaleX = 1;\n  let scaleY = 1;\n\n  if (matches) {\n    scaleX = parseFloat(matches[1]);\n    scaleY = parseFloat(matches[4]);\n    if (!scaleX || !Number.isFinite(scaleX)) {\n      scaleX = 1;\n    }\n\n    if (!scaleY || !Number.isFinite(scaleY)) {\n      scaleY = 1;\n    }\n  }\n\n  let margins = getMargins(overlayNode);\n  overlaySize.width += margins.left + margins.right;\n  overlaySize.height += margins.top + margins.bottom;\n\n  if (scaleX) {\n    overlaySize.width = overlaySize.width / scaleX;\n  }\n  if (scaleY) {\n    overlaySize.height = overlaySize.height / scaleY;\n  }\n\n  let scrollSize = getScroll(scrollNode);\n  let boundaryDimensions = getContainerDimensions(boundaryElement);\n  let containerOffsetWithBoundary: Offset =\n    boundaryElement.tagName === 'BODY'\n      ? getOffset(container)\n      : getPosition(container, boundaryElement);\n\n  return calculatePositionInternal(\n    placement,\n    childOffset,\n    overlaySize,\n    scrollSize,\n    margins,\n    padding,\n    shouldFlip,\n    boundaryDimensions,\n    containerOffsetWithBoundary,\n    offset,\n    crossOffset,\n    isContainerPositioned,\n    shouldOverlapWithTrigger\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}