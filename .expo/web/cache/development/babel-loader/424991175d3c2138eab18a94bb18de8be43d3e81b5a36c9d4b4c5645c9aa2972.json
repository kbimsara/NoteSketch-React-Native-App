{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { useSingleSelectListState as $ijHKZ$useSingleSelectListState } from \"@react-stately/list\";\nimport { useRef as $ijHKZ$useRef, useEffect as $ijHKZ$useEffect } from \"react\";\nfunction $76f919a04c5a7d14$export$4ba071daf4e486(props) {\n  var _props_defaultSelectedKey;\n  var state = (0, $ijHKZ$useSingleSelectListState)(_objectSpread(_objectSpread({}, props), {}, {\n    suppressTextValueWarning: true,\n    defaultSelectedKey: (_props_defaultSelectedKey = props.defaultSelectedKey) !== null && _props_defaultSelectedKey !== void 0 ? _props_defaultSelectedKey : $76f919a04c5a7d14$var$findDefaultSelectedKey(props.collection, props.disabledKeys ? new Set(props.disabledKeys) : new Set())\n  }));\n  var selectionManager = state.selectionManager,\n    collection = state.collection,\n    currentSelectedKey = state.selectedKey;\n  var lastSelectedKey = (0, $ijHKZ$useRef)(currentSelectedKey);\n  (0, $ijHKZ$useEffect)(function () {\n    var selectedKey = currentSelectedKey;\n    if (selectionManager.isEmpty || !collection.getItem(selectedKey)) {\n      selectedKey = $76f919a04c5a7d14$var$findDefaultSelectedKey(collection, state.disabledKeys);\n      if (selectedKey != null) selectionManager.setSelectedKeys([selectedKey]);\n    }\n    if (selectedKey != null && selectionManager.focusedKey == null || !selectionManager.isFocused && selectedKey !== lastSelectedKey.current) selectionManager.setFocusedKey(selectedKey);\n    lastSelectedKey.current = selectedKey;\n  });\n  return _objectSpread(_objectSpread({}, state), {}, {\n    isDisabled: props.isDisabled || false\n  });\n}\nfunction $76f919a04c5a7d14$var$findDefaultSelectedKey(collection, disabledKeys) {\n  var selectedKey = null;\n  if (collection) {\n    selectedKey = collection.getFirstKey();\n    while (disabledKeys.has(selectedKey) && selectedKey !== collection.getLastKey()) selectedKey = collection.getKeyAfter(selectedKey);\n    if (disabledKeys.has(selectedKey) && selectedKey === collection.getLastKey()) selectedKey = collection.getFirstKey();\n  }\n  return selectedKey;\n}\nexport { $76f919a04c5a7d14$export$4ba071daf4e486 as useTabListState };","map":{"version":3,"names":["$76f919a04c5a7d14$export$4ba071daf4e486","props","_props_defaultSelectedKey","state","$ijHKZ$useSingleSelectListState","_objectSpread","suppressTextValueWarning","defaultSelectedKey","$76f919a04c5a7d14$var$findDefaultSelectedKey","collection","disabledKeys","Set","selectionManager","currentSelectedKey","selectedKey","lastSelectedKey","$ijHKZ$useRef","$ijHKZ$useEffect","isEmpty","getItem","setSelectedKeys","focusedKey","isFocused","current","setFocusedKey","isDisabled","getFirstKey","has","getLastKey","getKeyAfter"],"sources":["D:\\React Native\\Expo+glustack\\NoteSketch\\node_modules\\@react-stately\\tabs\\dist\\packages\\@react-stately\\tabs\\src\\index.ts","D:\\React Native\\Expo+glustack\\NoteSketch\\node_modules\\@react-stately\\tabs\\dist\\packages\\@react-stately\\tabs\\src\\useTabListState.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport {useTabListState} from './useTabListState';\n\nexport type {TabListProps} from '@react-types/tabs';\nexport type {TabListStateOptions, TabListState} from './useTabListState';\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Collection, CollectionStateBase, Key} from '@react-types/shared';\nimport {SingleSelectListState, useSingleSelectListState} from '@react-stately/list';\nimport {TabListProps} from '@react-types/tabs';\nimport {useEffect, useRef} from 'react';\n\nexport interface TabListStateOptions<T> extends Omit<TabListProps<T>, 'children'>, CollectionStateBase<T> {}\n\nexport interface TabListState<T> extends SingleSelectListState<T> {\n  /** Whether the tab list is disabled. */\n  isDisabled: boolean\n}\n\n/**\n * Provides state management for a Tabs component. Tabs include a TabList which tracks\n * which tab is currently selected and displays the content associated with that Tab in a TabPanel.\n */\nexport function useTabListState<T extends object>(props: TabListStateOptions<T>): TabListState<T> {\n  let state = useSingleSelectListState<T>({\n    ...props,\n    suppressTextValueWarning: true,\n    defaultSelectedKey: props.defaultSelectedKey ?? findDefaultSelectedKey(props.collection, props.disabledKeys ? new Set(props.disabledKeys) : new Set())\n  });\n\n  let {\n    selectionManager,\n    collection,\n    selectedKey: currentSelectedKey\n  } = state;\n\n  let lastSelectedKey = useRef(currentSelectedKey);\n  useEffect(() => {\n    // Ensure a tab is always selected (in case no selected key was specified or if selected item was deleted from collection)\n    let selectedKey = currentSelectedKey;\n    if (selectionManager.isEmpty || !collection.getItem(selectedKey)) {\n      selectedKey = findDefaultSelectedKey(collection, state.disabledKeys);\n      if (selectedKey != null) {\n        // directly set selection because replace/toggle selection won't consider disabled keys\n        selectionManager.setSelectedKeys([selectedKey]);\n      }\n    }\n\n    // If the tablist doesn't have focus and the selected key changes or if there isn't a focused key yet, change focused key to the selected key if it exists.\n    if (selectedKey != null && selectionManager.focusedKey == null || (!selectionManager.isFocused && selectedKey !== lastSelectedKey.current)) {\n      selectionManager.setFocusedKey(selectedKey);\n    }\n    lastSelectedKey.current = selectedKey;\n  });\n\n  return {\n    ...state,\n    isDisabled: props.isDisabled || false\n  };\n}\n\nfunction findDefaultSelectedKey<T>(collection: Collection<T> | null, disabledKeys: Set<Key>) {\n  let selectedKey = null;\n  if (collection) {\n    selectedKey = collection.getFirstKey();\n    // loop over tabs until we find one that isn't disabled and select that\n    while (disabledKeys.has(selectedKey) && selectedKey !== collection.getLastKey()) {\n      selectedKey = collection.getKeyAfter(selectedKey);\n    }\n    // if this check is true, then every item is disabled, it makes more sense to default to the first key than the last\n    if (disabledKeys.has(selectedKey) && selectedKey === collection.getLastKey()) {\n      selectedKey = collection.getFirstKey();\n    }\n  }\n\n  return selectedKey;\n}\n"],"mappings":";;;;;AC4BO,SAASA,wCAAkCC,KAA6B;MAIvDC,yBAAA;EAHtB,IAAIC,KAAA,GAAQ,IAAAC,+BAAuB,EAAAC,aAAA,CAAAA,aAAA,KAC9BJ,KAAK;IACRK,wBAAA,EAA0B;IAC1BC,kBAAA,EAAoB,CAAAL,yBAAA,GAAAD,KAAA,CAAMM,kBAAkB,cAAxBL,yBAAA,cAAAA,yBAAA,GAA4BM,4CAAA,CAAuBP,KAAA,CAAMQ,UAAU,EAAER,KAAA,CAAMS,YAAY,GAAG,IAAIC,GAAA,CAAIV,KAAA,CAAMS,YAAY,IAAI,IAAIC,GAAA;EAAA,EAClJ;EAEA,IACEC,gBAAgB,GAGdT,KAAA,CAJAS,gBAAA;IAEFH,UAAU,GAERN,KAAA,CAHcM,UAAA;IAEHI,kBAAkB,GAC7BV,KAAA,CADFW,WAAA;EAGF,IAAIC,eAAA,GAAkB,IAAAC,aAAK,EAAEH,kBAAA;EAC7B,IAAAI,gBAAQ,EAAE;IAER,IAAIH,WAAA,GAAcD,kBAAA;IAClB,IAAID,gBAAA,CAAiBM,OAAO,IAAI,CAACT,UAAA,CAAWU,OAAO,CAACL,WAAA,GAAc;MAChEA,WAAA,GAAcN,4CAAA,CAAuBC,UAAA,EAAYN,KAAA,CAAMO,YAAY;MACnE,IAAII,WAAA,IAAe,MAEjBF,gBAAA,CAAiBQ,eAAe,CAAC,CAACN,WAAA,CAAY;IAElD;IAGA,IAAIA,WAAA,IAAe,QAAQF,gBAAA,CAAiBS,UAAU,IAAI,QAAS,CAACT,gBAAA,CAAiBU,SAAS,IAAIR,WAAA,KAAgBC,eAAA,CAAgBQ,OAAO,EACvIX,gBAAA,CAAiBY,aAAa,CAACV,WAAA;IAEjCC,eAAA,CAAgBQ,OAAO,GAAGT,WAAA;EAC5B;EAEA,OAAAT,aAAA,CAAAA,aAAA,KACKF,KAAK;IACRsB,UAAA,EAAYxB,KAAA,CAAMwB,UAAU,IAAI;EAAA;AAEpC;AAEA,SAASjB,6CAA0BC,UAAgC,EAAEC,YAAsB;EACzF,IAAII,WAAA,GAAc;EAClB,IAAIL,UAAA,EAAY;IACdK,WAAA,GAAcL,UAAA,CAAWiB,WAAW;IAEpC,OAAOhB,YAAA,CAAaiB,GAAG,CAACb,WAAA,KAAgBA,WAAA,KAAgBL,UAAA,CAAWmB,UAAU,IAC3Ed,WAAA,GAAcL,UAAA,CAAWoB,WAAW,CAACf,WAAA;IAGvC,IAAIJ,YAAA,CAAaiB,GAAG,CAACb,WAAA,KAAgBA,WAAA,KAAgBL,UAAA,CAAWmB,UAAU,IACxEd,WAAA,GAAcL,UAAA,CAAWiB,WAAW;EAExC;EAEA,OAAOZ,WAAA;AACT","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}