{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { getChildNodes as $cAn5f$getChildNodes, getLastItem as $cAn5f$getLastItem, getFirstItem as $cAn5f$getFirstItem } from \"@react-stately/collections\";\nimport { useMultipleSelectionState as $cAn5f$useMultipleSelectionState, SelectionManager as $cAn5f$SelectionManager } from \"@react-stately/selection\";\nimport { useMemo as $cAn5f$useMemo, useRef as $cAn5f$useRef, useEffect as $cAn5f$useEffect } from \"react\";\nfunction $62967d126f3aa823$export$4007ac09ff9c68ed(props) {\n  var collection = props.collection,\n    focusMode = props.focusMode;\n  var selectionState = (0, $cAn5f$useMultipleSelectionState)(props);\n  var disabledKeys = (0, $cAn5f$useMemo)(function () {\n    return props.disabledKeys ? new Set(props.disabledKeys) : new Set();\n  }, [props.disabledKeys]);\n  var setFocusedKey = selectionState.setFocusedKey;\n  selectionState.setFocusedKey = function (key, child) {\n    if (focusMode === \"cell\" && key != null) {\n      var item = collection.getItem(key);\n      if ((item === null || item === void 0 ? void 0 : item.type) === \"item\") {\n        var _getLastItem, _getFirstItem;\n        var children = (0, $cAn5f$getChildNodes)(item, collection);\n        if (child === \"last\") key = (_getLastItem = (0, $cAn5f$getLastItem)(children)) === null || _getLastItem === void 0 ? void 0 : _getLastItem.key;else key = (_getFirstItem = (0, $cAn5f$getFirstItem)(children)) === null || _getFirstItem === void 0 ? void 0 : _getFirstItem.key;\n      }\n    }\n    setFocusedKey(key, child);\n  };\n  var selectionManager = (0, $cAn5f$useMemo)(function () {\n    return new (0, $cAn5f$SelectionManager)(collection, selectionState);\n  }, [collection, selectionState]);\n  var cachedCollection = (0, $cAn5f$useRef)(null);\n  (0, $cAn5f$useEffect)(function () {\n    if (selectionState.focusedKey != null && !collection.getItem(selectionState.focusedKey)) {\n      var node = cachedCollection.current.getItem(selectionState.focusedKey);\n      var parentNode = node.parentKey != null && (node.type === \"cell\" || node.type === \"rowheader\" || node.type === \"column\") ? cachedCollection.current.getItem(node.parentKey) : node;\n      var cachedRows = cachedCollection.current.rows;\n      var rows = collection.rows;\n      var diff = cachedRows.length - rows.length;\n      var index = Math.min(diff > 1 ? Math.max(parentNode.index - diff + 1, 0) : parentNode.index, rows.length - 1);\n      var newRow;\n      while (index >= 0) {\n        if (!selectionManager.isDisabled(rows[index].key) && rows[index].type !== \"headerrow\") {\n          newRow = rows[index];\n          break;\n        }\n        if (index < rows.length - 1) index++;else {\n          if (index > parentNode.index) index = parentNode.index;\n          index--;\n        }\n      }\n      if (newRow) {\n        var childNodes = newRow.hasChildNodes ? _toConsumableArray((0, $cAn5f$getChildNodes)(newRow, collection)) : [];\n        var keyToFocus = newRow.hasChildNodes && parentNode !== node && node.index < childNodes.length ? childNodes[node.index].key : newRow.key;\n        selectionState.setFocusedKey(keyToFocus);\n      } else selectionState.setFocusedKey(null);\n    }\n    cachedCollection.current = collection;\n  }, [collection, selectionManager, selectionState, selectionState.focusedKey]);\n  return {\n    collection: collection,\n    disabledKeys: disabledKeys,\n    isKeyboardNavigationDisabled: false,\n    selectionManager: selectionManager\n  };\n}\nvar $16805b1b18093c5f$export$de3fdf6493c353d = function () {\n  function $16805b1b18093c5f$export$de3fdf6493c353d(opts) {\n    var _this = this;\n    _classCallCheck(this, $16805b1b18093c5f$export$de3fdf6493c353d);\n    this.keyMap = new Map();\n    this.keyMap = new Map();\n    this.columnCount = opts === null || opts === void 0 ? void 0 : opts.columnCount;\n    this.rows = [];\n    var visit = function visit(node) {\n      var prevNode = _this.keyMap.get(node.key);\n      if (opts.visitNode) node = opts.visitNode(node);\n      _this.keyMap.set(node.key, node);\n      var childKeys = new Set();\n      var last;\n      for (var child of node.childNodes) {\n        if (child.type === \"cell\" && child.parentKey == null) child.parentKey = node.key;\n        childKeys.add(child.key);\n        if (last) {\n          last.nextKey = child.key;\n          child.prevKey = last.key;\n        } else child.prevKey = null;\n        visit(child);\n        last = child;\n      }\n      if (last) last.nextKey = null;\n      if (prevNode) {\n        for (var _child of prevNode.childNodes) if (!childKeys.has(_child.key)) remove(_child);\n      }\n    };\n    var remove = function remove(node) {\n      _this.keyMap.delete(node.key);\n      for (var child of node.childNodes) if (_this.keyMap.get(child.key) === child) remove(child);\n    };\n    var last;\n    opts.items.forEach(function (node, i) {\n      var rowNode = _objectSpread({\n        level: 0,\n        key: \"row-\" + i,\n        type: \"row\",\n        value: undefined,\n        hasChildNodes: true,\n        childNodes: _toConsumableArray(node.childNodes),\n        rendered: undefined,\n        textValue: undefined\n      }, node);\n      if (last) {\n        last.nextKey = rowNode.key;\n        rowNode.prevKey = last.key;\n      } else rowNode.prevKey = null;\n      _this.rows.push(rowNode);\n      visit(rowNode);\n      last = rowNode;\n    });\n    if (last) last.nextKey = null;\n  }\n  return _createClass($16805b1b18093c5f$export$de3fdf6493c353d, [{\n    key: Symbol.iterator,\n    value: function* value() {\n      yield* _toConsumableArray(this.rows);\n    }\n  }, {\n    key: \"size\",\n    get: function get() {\n      return _toConsumableArray(this.rows).length;\n    }\n  }, {\n    key: \"getKeys\",\n    value: function getKeys() {\n      return this.keyMap.keys();\n    }\n  }, {\n    key: \"getKeyBefore\",\n    value: function getKeyBefore(key) {\n      var node = this.keyMap.get(key);\n      return node ? node.prevKey : null;\n    }\n  }, {\n    key: \"getKeyAfter\",\n    value: function getKeyAfter(key) {\n      var node = this.keyMap.get(key);\n      return node ? node.nextKey : null;\n    }\n  }, {\n    key: \"getFirstKey\",\n    value: function getFirstKey() {\n      var _;\n      return (_ = _toConsumableArray(this.rows)[0]) === null || _ === void 0 ? void 0 : _.key;\n    }\n  }, {\n    key: \"getLastKey\",\n    value: function getLastKey() {\n      var _rows_;\n      var rows = _toConsumableArray(this.rows);\n      return (_rows_ = rows[rows.length - 1]) === null || _rows_ === void 0 ? void 0 : _rows_.key;\n    }\n  }, {\n    key: \"getItem\",\n    value: function getItem(key) {\n      return this.keyMap.get(key);\n    }\n  }, {\n    key: \"at\",\n    value: function at(idx) {\n      var keys = _toConsumableArray(this.getKeys());\n      return this.getItem(keys[idx]);\n    }\n  }, {\n    key: \"getChildren\",\n    value: function getChildren(key) {\n      var node = this.keyMap.get(key);\n      return (node === null || node === void 0 ? void 0 : node.childNodes) || [];\n    }\n  }]);\n}();\nexport { $62967d126f3aa823$export$4007ac09ff9c68ed as useGridState, $16805b1b18093c5f$export$de3fdf6493c353d as GridCollection };","map":{"version":3,"names":["$62967d126f3aa823$export$4007ac09ff9c68ed","props","collection","focusMode","selectionState","$cAn5f$useMultipleSelectionState","disabledKeys","$cAn5f$useMemo","Set","setFocusedKey","key","child","item","getItem","type","_getLastItem","_getFirstItem","children","$cAn5f$getChildNodes","$cAn5f$getLastItem","$cAn5f$getFirstItem","selectionManager","$cAn5f$SelectionManager","cachedCollection","$cAn5f$useRef","$cAn5f$useEffect","focusedKey","node","current","parentNode","parentKey","cachedRows","rows","diff","length","index","Math","min","max","newRow","isDisabled","childNodes","hasChildNodes","_toConsumableArray","keyToFocus","isKeyboardNavigationDisabled","$16805b1b18093c5f$export$de3fdf6493c353d","opts","_this","_classCallCheck","keyMap","Map","columnCount","visit","prevNode","get","visitNode","set","childKeys","last","add","nextKey","prevKey","has","remove","delete","items","forEach","i","rowNode","_objectSpread","level","value","undefined","rendered","textValue","push","_createClass","Symbol","iterator","getKeys","keys","getKeyBefore","getKeyAfter","getFirstKey","_","getLastKey","_rows_","at","idx","getChildren"],"sources":["D:\\React Native\\Expo+glustack\\NoteSketch\\node_modules\\@react-stately\\grid\\dist\\packages\\@react-stately\\grid\\src\\index.ts","D:\\React Native\\Expo+glustack\\NoteSketch\\node_modules\\@react-stately\\grid\\dist\\packages\\@react-stately\\grid\\src\\useGridState.ts","D:\\React Native\\Expo+glustack\\NoteSketch\\node_modules\\@react-stately\\grid\\dist\\packages\\@react-stately\\grid\\src\\GridCollection.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nexport {useGridState} from './useGridState';\nexport {GridCollection} from './GridCollection';\n\nexport type {GridStateOptions, GridState} from './useGridState';\n","import {getChildNodes, getFirstItem, getLastItem} from '@react-stately/collections';\nimport {GridCollection, GridNode} from '@react-types/grid';\nimport {Key} from '@react-types/shared';\nimport {MultipleSelectionStateProps, SelectionManager, useMultipleSelectionState} from '@react-stately/selection';\nimport {useEffect, useMemo, useRef} from 'react';\n\nexport interface GridState<T, C extends GridCollection<T>> {\n  collection: C,\n  /** A set of keys for rows that are disabled. */\n  disabledKeys: Set<Key>,\n  /** A selection manager to read and update row selection state. */\n  selectionManager: SelectionManager,\n  /** Whether keyboard navigation is disabled, such as when the arrow keys should be handled by a component within a cell. */\n  isKeyboardNavigationDisabled: boolean\n}\n\nexport interface GridStateOptions<T, C extends GridCollection<T>> extends MultipleSelectionStateProps {\n  collection: C,\n  disabledKeys?: Iterable<Key>,\n  focusMode?: 'row' | 'cell'\n}\n\n/**\n * Provides state management for a grid component. Handles row selection and focusing a grid cell's focusable child if applicable.\n */\nexport function useGridState<T extends object, C extends GridCollection<T>>(props: GridStateOptions<T, C>): GridState<T, C> {\n  let {collection, focusMode} = props;\n  let selectionState = useMultipleSelectionState(props);\n  let disabledKeys = useMemo(() =>\n      props.disabledKeys ? new Set(props.disabledKeys) : new Set<Key>()\n    , [props.disabledKeys]);\n\n  let setFocusedKey = selectionState.setFocusedKey;\n  selectionState.setFocusedKey = (key, child) => {\n    // If focusMode is cell and an item is focused, focus a child cell instead.\n    if (focusMode === 'cell' && key != null) {\n      let item = collection.getItem(key);\n      if (item?.type === 'item') {\n        let children = getChildNodes(item, collection);\n        if (child === 'last') {\n          key = getLastItem(children)?.key;\n        } else {\n          key = getFirstItem(children)?.key;\n        }\n      }\n    }\n\n    setFocusedKey(key, child);\n  };\n\n  let selectionManager = useMemo(() =>\n    new SelectionManager(collection, selectionState)\n    , [collection, selectionState]\n  );\n\n  // Reset focused key if that item is deleted from the collection.\n  const cachedCollection = useRef(null);\n  useEffect(() => {\n    if (selectionState.focusedKey != null && !collection.getItem(selectionState.focusedKey)) {\n      const node = cachedCollection.current.getItem(selectionState.focusedKey);\n      const parentNode =\n        node.parentKey != null && (node.type === 'cell' || node.type === 'rowheader' || node.type === 'column') ?\n        cachedCollection.current.getItem(node.parentKey) :\n        node;\n      const cachedRows = cachedCollection.current.rows;\n      const rows = collection.rows;\n      const diff = cachedRows.length - rows.length;\n      let index = Math.min(\n        (\n          diff > 1 ?\n          Math.max(parentNode.index - diff + 1, 0) :\n          parentNode.index\n        ),\n        rows.length - 1);\n      let newRow:GridNode<T>;\n      while (index >= 0) {\n        if (!selectionManager.isDisabled(rows[index].key) && rows[index].type !== 'headerrow') {\n          newRow = rows[index];\n          break;\n        }\n        // Find next, not disabled row.\n        if (index < rows.length - 1) {\n          index++;\n        // Otherwise, find previous, not disabled row.\n        } else {\n          if (index > parentNode.index) {\n            index = parentNode.index;\n          }\n          index--;\n        }\n      }\n      if (newRow) {\n        const childNodes = newRow.hasChildNodes ? [...getChildNodes(newRow, collection)] : [];\n        const keyToFocus =\n          newRow.hasChildNodes &&\n          parentNode !== node &&\n          node.index < childNodes.length ?\n          childNodes[node.index].key :\n          newRow.key;\n        selectionState.setFocusedKey(keyToFocus);\n      } else {\n        selectionState.setFocusedKey(null);\n      }\n    }\n    cachedCollection.current = collection;\n  }, [collection, selectionManager, selectionState, selectionState.focusedKey]);\n\n  return {\n    collection,\n    disabledKeys,\n    isKeyboardNavigationDisabled: false,\n    selectionManager\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {GridNode, GridRow, GridCollection as IGridCollection} from '@react-types/grid';\nimport {Key} from '@react-types/shared';\n\ninterface GridCollectionOptions<T> {\n  columnCount: number,\n  items: GridRow<T>[],\n  visitNode?: (cell: GridNode<T>) => GridNode<T>\n}\n\nexport class GridCollection<T> implements IGridCollection<T> {\n  keyMap: Map<Key, GridNode<T>> = new Map();\n  columnCount: number;\n  rows: GridNode<T>[];\n\n  constructor(opts?: GridCollectionOptions<T>) {\n    this.keyMap = new Map();\n    this.columnCount = opts?.columnCount;\n    this.rows = [];\n\n    let visit = (node: GridNode<T>) => {\n      // If the node is the same object as the previous node for the same key,\n      // we can skip this node and its children. We always visit columns though,\n      // because we depend on order to build the columns array.\n      let prevNode = this.keyMap.get(node.key);\n      if (opts.visitNode) {\n        node = opts.visitNode(node);\n      }\n\n      this.keyMap.set(node.key, node);\n\n      let childKeys = new Set();\n      let last: GridNode<T>;\n      for (let child of node.childNodes) {\n        if (child.type === 'cell' && child.parentKey == null) {\n          // if child is a cell parent key isn't already established by the collection, match child node to parent row\n          child.parentKey = node.key;\n        }\n        childKeys.add(child.key);\n\n        if (last) {\n          last.nextKey = child.key;\n          child.prevKey = last.key;\n        } else {\n          child.prevKey = null;\n        }\n\n        visit(child);\n        last = child;\n      }\n\n      if (last) {\n        last.nextKey = null;\n      }\n\n      // Remove deleted nodes and their children from the key map\n      if (prevNode) {\n        for (let child of prevNode.childNodes) {\n          if (!childKeys.has(child.key)) {\n            remove(child);\n          }\n        }\n      }\n    };\n\n    let remove = (node: GridNode<T>) => {\n      this.keyMap.delete(node.key);\n      for (let child of node.childNodes) {\n        if (this.keyMap.get(child.key) === child) {\n          remove(child);\n        }\n      }\n    };\n\n    let last: GridNode<T>;\n    opts.items.forEach((node, i) => {\n      let rowNode = {\n        level: 0,\n        key: 'row-' + i,\n        type: 'row',\n        value: undefined,\n        hasChildNodes: true,\n        childNodes: [...node.childNodes],\n        rendered: undefined,\n        textValue: undefined,\n        ...node\n      } as GridNode<T>;\n\n      if (last) {\n        last.nextKey = rowNode.key;\n        rowNode.prevKey = last.key;\n      } else {\n        rowNode.prevKey = null;\n      }\n\n      this.rows.push(rowNode);\n      visit(rowNode);\n\n      last = rowNode;\n    });\n\n    if (last) {\n      last.nextKey = null;\n    }\n  }\n\n  *[Symbol.iterator]() {\n    yield* [...this.rows];\n  }\n\n  get size() {\n    return [...this.rows].length;\n  }\n\n  getKeys() {\n    return this.keyMap.keys();\n  }\n\n  getKeyBefore(key: Key) {\n    let node = this.keyMap.get(key);\n    return node ? node.prevKey : null;\n  }\n\n  getKeyAfter(key: Key) {\n    let node = this.keyMap.get(key);\n    return node ? node.nextKey : null;\n  }\n\n  getFirstKey() {\n    return [...this.rows][0]?.key;\n  }\n\n  getLastKey() {\n    let rows = [...this.rows];\n    return rows[rows.length - 1]?.key;\n  }\n\n  getItem(key: Key) {\n    return this.keyMap.get(key);\n  }\n\n  at(idx: number) {\n    const keys = [...this.getKeys()];\n    return this.getItem(keys[idx]);\n  }\n\n  getChildren(key: Key): Iterable<GridNode<T>> {\n    let node = this.keyMap.get(key);\n    return node?.childNodes || [];\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}